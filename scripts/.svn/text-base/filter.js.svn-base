// Generated by CoffeeScript 1.6.3
(function() {
  var filter,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  filter = (function() {
    var attr_length, attributes_array, attributes_array_units, biom, columns_non_empty_sample_count, columns_sample_count_list, columns_sample_name_array, date_array, filename, groupable_array, groupable_array_content, no_data_attributes_array, unknown_array;

    biom = null;

    filename = null;

    attr_length = null;

    date_array = [];

    no_data_attributes_array = [];

    unknown_array = [];

    attributes_array = [];

    attributes_array_units = [];

    groupable_array = [];

    groupable_array_content = [];

    columns_sample_name_array = [];

    columns_sample_count_list = [];

    columns_non_empty_sample_count = [];

    function filter() {
      this.drawBasicBars = __bind(this.drawBasicBars, this);
      var _this = this;
      db.open({
        server: "BiomData",
        version: 1,
        schema: {
          "biom": {
            key: {
              keyPath: 'id',
              autoIncrement: true
            }
          }
        }
      }).done(function(s) {
        return s.biom.query().all().execute().done(function(results) {
          var currentData, i, _i, _ref;
          currentData = results[results.length - 1];
          filename = currentData.name;
          biom = JSON.parse(currentData.data);
          attr_length = biom.shape[1] - 1;
          _this.generateColumns();
          _this.generateColumnsSummary();
          _this.generateColumnsValues();
          _this.generateDate();
          $("#file_numbers").append("File: " + filename + ", Size: " + (parseFloat(currentData.size.valueOf() / 1000000)).toFixed(1) + " MB <br/><br />Observation: " + biom.shape[0] + ", Sample: " + biom.shape[1]);
          _this.generateLeftDates();
          _this.generateLeftNumeric();
          _this.generateLeftNonNumeric();
          _this.generateLeftGroupable();
          if (groupable_array_content.length > 0) {
            for (i = _i = 0, _ref = groupable_array_content.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
              if (typeof groupable_array_content[i] === 'number') {
                groupable_array_content.splice(groupable_array_content.indexOf(groupable_array_content[i]), 1);
              }
            }
          }
          _this.generateThumbnails();
          return _this.livePreview();
        });
      });
    }

    filter.prototype.jumpToGallery = function() {
      var _this = this;
      return db.open({
        server: "BiomSample",
        version: 1,
        schema: {
          "biomSample": {
            key: {
              keyPath: 'id',
              autoIncrement: true
            }
          }
        }
      }).done(function(s) {
        var sampleToStore;
        sampleToStore = {};
        sampleToStore.name = filename;
        sampleToStore.type = 'sampleIDs';
        sampleToStore.selected_sample = _this.selected_sample;
        sampleToStore.groupable = groupable_array;
        sampleToStore.selected_groupable_array = _this.selected_groupable_array;
        sampleToStore.selected_attributes_array = _this.selected_attributes_array;
        return s.biomSample.add(sampleToStore).done(function(item) {
          return setTimeout("window.location.href = 'viz.html'", 1000);
        });
      });
    };

    filter.prototype.generateColumns = function() {
      var flag, i, idential_elements_in_array, idential_elements_in_array_flag, j, key, starting_flag, _i, _j, _k, _l, _ref, _ref1, _results;
      _results = [];
      for (key in biom.columns[0].metadata) {
        if (key.toLowerCase().indexOf("date") !== -1) {
          _results.push(date_array.push(key));
        } else if ((key.toLowerCase().indexOf("barcode") !== -1) || (key.toLowerCase().indexOf("sequence") !== -1) || (key.toLowerCase().indexOf("reverse") !== -1) || (key.toLowerCase() === "internalcode") || (key.toLowerCase() === "description") || (key.toLowerCase().indexOf("adapter") !== -1)) {
          _results.push(no_data_attributes_array.push(key));
        } else if (!isNaN(biom.columns[0].metadata[key].split(" ")[0].replace(",", "")) || biom.columns[0].metadata[key] === "no_data") {
          idential_elements_in_array_flag = false;
          for (i = _i = 0; 0 <= attr_length ? _i <= attr_length : _i >= attr_length; i = 0 <= attr_length ? ++_i : --_i) {
            if (biom.columns[i].metadata[key] !== 'no_data') {
              idential_elements_in_array = biom.columns[i].metadata[key];
              break;
            }
          }
          for (i = _j = 0; 0 <= attr_length ? _j <= attr_length : _j >= attr_length; i = 0 <= attr_length ? ++_j : --_j) {
            if (biom.columns[i].metadata[key] !== idential_elements_in_array && biom.columns[i].metadata[key] !== 'no_data') {
              idential_elements_in_array_flag = true;
            }
          }
          if (idential_elements_in_array_flag) {
            attributes_array.push(key);
            _results.push((function() {
              var _k, _results1;
              _results1 = [];
              for (i = _k = 0; 0 <= attr_length ? _k <= attr_length : _k >= attr_length; i = 0 <= attr_length ? ++_k : --_k) {
                if (biom.columns[i].metadata[key] !== 'no_data') {
                  _results1.push(attributes_array_units.push(biom.columns[i].metadata[key].split(" ")[1]));
                } else {
                  _results1.push(void 0);
                }
              }
              return _results1;
            })());
          } else {
            _results.push(no_data_attributes_array.push(key));
          }
        } else if (typeof key === 'string') {
          groupable_array.push(key);
          starting_flag = groupable_array_content.length;
          groupable_array_content.push(starting_flag);
          for (i = _k = 0; 0 <= attr_length ? _k <= attr_length : _k >= attr_length; i = 0 <= attr_length ? ++_k : --_k) {
            flag = true;
            if (groupable_array_content.length > 0) {
              for (j = _l = _ref = starting_flag + 1, _ref1 = groupable_array_content.length - 1; _ref <= _ref1 ? _l <= _ref1 : _l >= _ref1; j = _ref <= _ref1 ? ++_l : --_l) {
                if (biom.columns[i].metadata[key] === groupable_array_content[j]) {
                  flag = false;
                  break;
                }
              }
              if (flag) {
                groupable_array_content.push(biom.columns[i].metadata[key]);
              }
            }
          }
          if (groupable_array_content.length - starting_flag === 2) {
            no_data_attributes_array.push(key);
            groupable_array.splice(groupable_array.length - 1, 1);
            _results.push(groupable_array_content.splice(groupable_array_content.length - 2, 2));
          } else {
            _results.push(void 0);
          }
        } else {
          _results.push(unknown_array.push(key));
        }
      }
      return _results;
    };

    filter.prototype.generateColumnsSummary = function() {
      var columns_sample_total_count, i, _i, _j, _k, _ref, _results;
      columns_sample_total_count = 0;
      for (i = _i = 0; 0 <= attr_length ? _i <= attr_length : _i >= attr_length; i = 0 <= attr_length ? ++_i : --_i) {
        columns_sample_count_list[i] = 0;
        columns_sample_name_array.push(biom.columns[i].id);
      }
      for (i = _j = 0, _ref = biom.data.length - 1; 0 <= _ref ? _j <= _ref : _j >= _ref; i = 0 <= _ref ? ++_j : --_j) {
        columns_sample_total_count += biom.data[i][2];
        columns_sample_count_list[biom.data[i][1]] += biom.data[i][2];
      }
      _results = [];
      for (i = _k = 0; 0 <= attr_length ? _k <= attr_length : _k >= attr_length; i = 0 <= attr_length ? ++_k : --_k) {
        if (columns_sample_count_list[i] > 0) {
          _results.push(columns_non_empty_sample_count.push(i));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    filter.prototype.generateColumnsValues = function() {
      var i, j, key, _i, _j, _ref, _results;
      this.columns_metadata_array = [];
      this.columns_metadata_array = new Array(attributes_array.length);
      if (attributes_array.length > 0) {
        for (i = _i = 0, _ref = attributes_array.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
          this.columns_metadata_array[i] = new Array(attr_length + 1);
        }
        _results = [];
        for (i = _j = 0; 0 <= attr_length ? _j <= attr_length : _j >= attr_length; i = 0 <= attr_length ? ++_j : --_j) {
          _results.push((function() {
            var _results1;
            _results1 = [];
            for (key in biom.columns[i].metadata) {
              _results1.push((function() {
                var _k, _ref1, _results2;
                _results2 = [];
                for (j = _k = 0, _ref1 = attributes_array.length - 1; 0 <= _ref1 ? _k <= _ref1 : _k >= _ref1; j = 0 <= _ref1 ? ++_k : --_k) {
                  if (key === attributes_array[j]) {
                    this.columns_metadata_array[j][i] = parseFloat(biom.columns[i].metadata[key].split(" ")[0].replace(",", ""));
                    if (isNaN(this.columns_metadata_array[j][i])) {
                      _results2.push(this.columns_metadata_array[j][i] = -99999);
                    } else {
                      _results2.push(void 0);
                    }
                  } else {
                    _results2.push(void 0);
                  }
                }
                return _results2;
              }).call(this));
            }
            return _results1;
          }).call(this));
        }
        return _results;
      }
    };

    filter.prototype.generateDate = function() {
      var date_meta_key, i, m, number_date_array, ori_timestamp, _i, _j, _ref, _results;
      this.formatted_date_array = new Array(date_array.length);
      this.sorted_number_date_array_d = new Array(date_array.length);
      this.sorted_number_date_array_freq = new Array(date_array.length);
      number_date_array = new Array(date_array.length);
      if (date_array.length > 0) {
        _results = [];
        for (m = _i = 0, _ref = date_array.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; m = 0 <= _ref ? ++_i : --_i) {
          this.formatted_date_array[m] = [];
          this.sorted_number_date_array_d[m] = [];
          this.sorted_number_date_array_freq[m] = [];
          date_meta_key = date_array[m];
          number_date_array[m] = [];
          for (i = _j = 0; 0 <= attr_length ? _j <= attr_length : _j >= attr_length; i = 0 <= attr_length ? ++_j : --_j) {
            ori_timestamp = biom.columns[i].metadata[date_meta_key];
            if (ori_timestamp.length < 11 && ori_timestamp.indexOf(":") === -1) {
              this.formatted_date_array[m].push(moment(ori_timestamp).format("YYYY-MM-DD"));
              number_date_array[m].push(moment(ori_timestamp).format("YYYYMMDD"));
            } else {
              this.formatted_date_array[m].push(moment(ori_timestamp, "YYYY-MM-DDTHH:mm:ss Z").utc().format());
              number_date_array[m].push(moment(ori_timestamp, "YYYY-MM-DDTHH:mm:ss Z").utc().format("YYYYMMDDHHmmss"));
            }
          }
          this.sorted_number_date_array_d[m] = this.sortByFrequency(number_date_array[m])[0];
          _results.push(this.sorted_number_date_array_freq[m] = this.sortByFrequency(number_date_array[m])[1]);
        }
        return _results;
      }
    };

    filter.prototype.generateLeftDates = function() {
      var content, m, max_timestamp, min_timestamp, _i, _ref, _results,
        _this = this;
      content = "";
      this.range_dates_array = [];
      if (date_array.length === 0) {
        return $('#att_head_dates').hide();
      } else {
        if (date_array.length > 0) {
          _results = [];
          for (m = _i = 0, _ref = date_array.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; m = 0 <= _ref ? ++_i : --_i) {
            if (this.check_unique(this.formatted_date_array[m])) {
              $('#dates').append("<div class = 'biom_valid_attr'><p>" + date_array[m] + ": " + this.formatted_date_array[m][0] + "</p></div>");
              this.range_dates_array[m] = new Array(2);
              this.range_dates_array[m][0] = moment(this.formatted_date_array[m][0]).utc().format("X");
              _results.push(this.range_dates_array[m][1] = moment(this.formatted_date_array[m][0]).utc().format("X"));
            } else {
              content += "<div class = 'biom_valid_attr_dates'>";
              content += date_array[m];
              content += "<div class = 'icon-expand-collapse-c' id= 'expend_collapse_dates_icon_" + (m + 1) + "'><i class='icon-expand-alt'></i></div>";
              if (this.sorted_number_date_array_d[m][0].length < 9) {
                content += "<p class='range_new_dates' id='range_dates_" + (m + 1) + "_new'>" + moment(this.sorted_number_date_array_d[m][0], "YYYYMMDD").format("MM/DD/YY") + " - " + moment(this.sorted_number_date_array_d[m][this.sorted_number_date_array_d[m].length - 1], "YYYYMMDD").format("MM/DD/YY") + "</p>";
              } else {
                content += "<p class='range_new_dates' id='range_dates_" + (m + 1) + "_new'>" + moment(this.sorted_number_date_array_d[m][0], "YYYYMMDDHHmmss").format("MM/DD/YY") + " - " + moment(this.sorted_number_date_array_d[m][this.sorted_number_date_array_d[m].length - 1], "YYYYMMDDHHmmss").format("MM/DD/YY") + "</p>";
              }
              content += "<div style='display: none;' id = 'expend_collapse_dates_" + (m + 1) + "'>" + "<div class= 'biom_valid_att_thumbnail_dates' id='thumb_dates_" + (m + 1) + "'></div>";
              content += "<div class='biom_valid_att_slider' id='slider_dates_" + (m + 1) + "'></div>";
              if (this.sorted_number_date_array_d[m][0].length < 9) {
                content += "<p class='range_left_dates' id='range_dates_" + (m + 1) + "_left'>" + moment(this.sorted_number_date_array_d[m][0], "YYYYMMDD").format("YYYY-MM-DD") + "</p>";
                content += "<p class='range_right_dates' id='range_dates_" + (m + 1) + "_right'>" + moment(this.sorted_number_date_array_d[m][this.sorted_number_date_array_d[m].length - 1], "YYYYMMDD").format("YYYY-MM-DD") + "</p>";
                min_timestamp = moment(this.sorted_number_date_array_d[m][0], "YYYYMMDD").utc().format("X");
                max_timestamp = moment(this.sorted_number_date_array_d[m][this.sorted_number_date_array_d[m].length - 1], "YYYYMMDD").utc().format("X");
              } else {
                content += "<p class='range_left_dates' id='range_dates_" + (m + 1) + "_left'>" + moment(this.sorted_number_date_array_d[m][0], "YYYYMMDDHHmmss").format("YYYY-MM-DD<br/>HH:mm:ss") + "</p>";
                content += "<p class='range_right_dates' id='range_dates_" + (m + 1) + "_right'>" + moment(this.sorted_number_date_array_d[m][this.sorted_number_date_array_d[m].length - 1], "YYYYMMDDHHmmss").format("YYYY-MM-DD<br/>HH:mm:ss") + "</p>";
                min_timestamp = moment(this.sorted_number_date_array_d[m][0], "YYYYMMDDHHmmss Z").utc().format("X");
                max_timestamp = moment(this.sorted_number_date_array_d[m][this.sorted_number_date_array_d[m].length - 1], "YYYYMMDDHHmmss Z").utc().format("X");
              }
              content += "</div></div>";
              $('#dates').append(content);
              $('#expend_collapse_dates_icon_' + (m + 1)).click(function(event) {
                var id;
                id = event.currentTarget.id.replace('expend_collapse_dates_icon_', '');
                if ($('#expend_collapse_dates_' + id).attr('style') === 'display: none;') {
                  $('#expend_collapse_dates_' + id).show();
                  return $('#expend_collapse_dates_icon_' + id).html('<i class="icon-collapse-alt"></i>');
                } else {
                  $('#expend_collapse_dates_' + id).hide();
                  return $('#expend_collapse_dates_icon_' + id).html('<i class="icon-expand-alt"></i>');
                }
              });
              this.drawBasicBars('#thumb_dates_' + (m + 1), null, this.sorted_number_date_array_freq[m], null, [250, 50]);
              $('#slider_dates_' + (m + 1)).width($('#thumb_dates_' + (m + 1) + ' svg').attr('width') - 2);
              this.range_dates_array[m] = new Array(2);
              this.range_dates_array[m][0] = min_timestamp;
              this.range_dates_array[m][1] = max_timestamp;
              _results.push($("#slider_dates_" + (m + 1)).slider({
                range: true,
                min: 0,
                max: this.sorted_number_date_array_freq[m].length - 1,
                step: 1,
                values: [0, this.sorted_number_date_array_freq[m].length - 1],
                slide: function(event, ui) {
                  var id;
                  id = event.target.id.replace("slider_dates_", "");
                  $("#range_dates_" + id + "_new").text("[" + moment(_this.sorted_number_date_array_d[id - 1][ui.values[0]], "YYYYMMDD").format("MM/DD/YY") + " — " + moment(_this.sorted_number_date_array_d[id - 1][ui.values[1]], "YYYYMMDD").format("MM/DD/YY") + "]");
                  if (_this.sorted_number_date_array_d[id - 1][ui.values[0]].length < 9) {
                    _this.range_dates_array[id - 1][0] = moment(_this.sorted_number_date_array_d[id - 1][ui.values[0]], "YYYYMMDD").utc().format("X");
                    _this.range_dates_array[id - 1][1] = moment(_this.sorted_number_date_array_d[id - 1][ui.values[1]], "YYYYMMDD").utc().format("X");
                  } else {
                    _this.range_dates_array[id - 1][0] = moment(_this.sorted_number_date_array_d[id - 1][ui.values[0]], "YYYYMMDDHHmmss").utc().format("X");
                    _this.range_dates_array[id - 1][1] = moment(_this.sorted_number_date_array_d[id - 1][ui.values[1]], "YYYYMMDDHHmmss").utc().format("X");
                  }
                  return _this.livePreview();
                }
              }));
            }
          }
          return _results;
        }
      }
    };

    filter.prototype.generateLeftNumeric = function() {
      var content, i, _i, _ref, _results,
        _this = this;
      if (attributes_array.length === 0) {
        return $('#att_head_numeric').hide();
      } else {
        if (attributes_array.length > 0) {
          _results = [];
          for (i = _i = 0, _ref = attributes_array.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
            content = "";
            content += "<input type='checkbox' name='numeric_check_group' id='numeric_check_" + (i + 1) + "' checked='checked' /><label for='numeric_check_" + (i + 1) + "'></label>";
            content += "<span class = 'biom_valid_attr' id='att_" + (i + 1) + "'>" + attributes_array[i] + "</span>";
            if (typeof attributes_array_units[i] !== 'undefined' && attributes_array_units[i] !== null) {
              content += "<input type='text' class='biom_valid_attr_units' id='unit_" + (i + 1) + "' placeholder='" + attributes_array_units[i] + "'>";
            }
            content += "<div class = 'icon-expand-collapse-c' id= 'expend_collapse_icon_" + (i + 1) + "'><i class='icon-expand-alt'></i></div>";
            content += "<div class='biom_valid_att_thumbnail_sm' id='thumb_sm_" + (i + 1) + "'></div>";
            content += "<p class='range_new' id='range_" + (i + 1) + "_new'></p>";
            content += "<div style='display: none;' id = 'expend_collapse_" + (i + 1) + "'>" + "<div class='biom_valid_att_thumbnail' id='thumb_" + (i + 1) + "'></div>";
            content += "<div class='biom_valid_att_slider' id='slider_" + (i + 1) + "'></div>";
            content += "<div class='blackSticks'></div>";
            content += "<p class='range_left' id='range_" + (i + 1) + "_left'></p>";
            content += "<p class='range_right' id='range_" + (i + 1) + "_right'></p>";
            content += "<p class='biom_valid_notes' id='att_note_" + (i + 1) + "'></p></div>";
            $('#numeric_att').append("<div>" + content + "</div>");
            $('#expend_collapse_icon_' + (i + 1)).click(function(event) {
              var id;
              id = event.currentTarget.id.replace('expend_collapse_icon_', '');
              if ($('#expend_collapse_' + id).attr('style') === 'display: none;') {
                $('#expend_collapse_' + id).show();
                $('#att_' + id).css('font-weight', 'bold');
                $('#unit_' + id).show();
                $('#range_' + id + '_new').show();
                $('#thumb_sm_' + id).hide();
                return $('#expend_collapse_icon_' + id).html('<i class="icon-collapse-alt"></i>');
              } else {
                $('#expend_collapse_' + id).hide();
                $('#att_' + id).css('font-weight', 'normal');
                $('#unit_' + id).hide();
                $('#range_' + id + '_new').hide();
                $('#thumb_sm_' + id).show();
                return $('#expend_collapse_icon_' + id).html('<i class="icon-expand-alt"></i>');
              }
            });
            _results.push($('#numeric_check_' + (i + 1)).click(function() {
              return _this.livePreview();
            }));
          }
          return _results;
        }
      }
    };

    filter.prototype.generateLeftNonNumeric = function() {
      var content, i, _i, _ref, _results,
        _this = this;
      if (no_data_attributes_array.length === 0) {
        return $('#att_head_descriptive').hide();
      } else {
        if (no_data_attributes_array.length > 0) {
          _results = [];
          for (i = _i = 0, _ref = no_data_attributes_array.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
            content = "";
            content += "<input type='checkbox' name='non_numeric_check_group' id='non_numeric_check_" + (i + 1) + "' /><label for='non_numeric_check_" + (i + 1) + "'></label><span class = 'biom_valid_attr'>" + no_data_attributes_array[i] + "</span>";
            $('#non_numeric_att').append("<div>" + content + "</div>");
            _results.push($('#non_numeric_check_' + (i + 1)).click(function() {
              return _this.livePreview();
            }));
          }
          return _results;
        }
      }
    };

    filter.prototype.generateLeftGroupable = function() {
      var check_count, content, flag, i, j, k, pointer_left, pointer_right, toprocess, _i, _j, _k, _ref, _ref1, _ref2, _results;
      pointer_left = 1;
      pointer_right = groupable_array_content.length - 1;
      check_count = 1;
      if (groupable_array.length === 0) {
        return $('#att_head_groupable').hide();
      } else {
        if (groupable_array.length > 0) {
          _results = [];
          for (i = _i = 0, _ref = groupable_array.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
            flag = true;
            toprocess = [];
            content = "";
            content += "<span class = 'biom_valid_attr'>" + groupable_array[_i] + "</span><br/>";
            if (groupable_array_content.length > 0) {
              for (j = _j = pointer_left, _ref1 = groupable_array_content.length - 1; pointer_left <= _ref1 ? _j <= _ref1 : _j >= _ref1; j = pointer_left <= _ref1 ? ++_j : --_j) {
                if (groupable_array_content[j] === j) {
                  pointer_right = j;
                  flag = false;
                  break;
                }
              }
              if (flag) {
                toprocess = groupable_array_content.slice(pointer_left, groupable_array_content.length);
              } else {
                toprocess = groupable_array_content.slice(pointer_left, pointer_right);
                pointer_left = pointer_right + 1;
                pointer_right = groupable_array_content.length - 1;
              }
              if (toprocess.length > 0) {
                for (k = _k = 0, _ref2 = toprocess.length - 1; 0 <= _ref2 ? _k <= _ref2 : _k >= _ref2; k = 0 <= _ref2 ? ++_k : --_k) {
                  content += "<input type='checkbox' name='groupable_check_group' id='groupable_check_" + check_count + "' checked='checked' /><label for='groupable_check_" + check_count + "'></label><span class = 'biom_valid_attr_grp'>" + toprocess[_k] + "</span><br/>";
                  check_count++;
                }
                $('#groupable_att').append("<div>" + content + "</div>");
                _results.push((function() {
                  var _l, _ref3, _results1,
                    _this = this;
                  _results1 = [];
                  for (k = _l = 0, _ref3 = toprocess.length - 1; 0 <= _ref3 ? _l <= _ref3 : _l >= _ref3; k = 0 <= _ref3 ? ++_l : --_l) {
                    _results1.push($('#groupable_check_' + (k + 1)).click(function() {
                      return _this.livePreview();
                    }));
                  }
                  return _results1;
                }).call(this));
              } else {
                _results.push(void 0);
              }
            } else {
              _results.push(void 0);
            }
          }
          return _results;
        }
      }
    };

    filter.prototype.generateThumbnails = function() {
      var each_numeric_linechart, each_numeric_linechart_max, each_numeric_linechart_min, i, nan_values, step, _i, _ref, _results,
        _this = this;
      this.range_array = [];
      this.lines_array = new Array(this.columns_metadata_array.length);
      if (this.columns_metadata_array.length > 0) {
        step = new Array(this.columns_metadata_array.length);
        _results = [];
        for (i = _i = 0, _ref = this.columns_metadata_array.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
          nan_values = 0;
          each_numeric_linechart = this.sortByFrequency(this.columns_metadata_array[i]);
          if (each_numeric_linechart[0][0] === -99999) {
            nan_values = each_numeric_linechart[1][0];
            each_numeric_linechart[0].shift();
            each_numeric_linechart[1].shift();
          }
          if (nan_values > 0) {
            $("#att_note_" + (i + 1)).text("* This column has " + nan_values + " empty values.");
          }
          this.lines_array[i] = new Array(2);
          this.lines_array[i][0] = each_numeric_linechart[0];
          this.lines_array[i][1] = each_numeric_linechart[1];
          each_numeric_linechart_min = Math.min.apply(Math, each_numeric_linechart[0]);
          each_numeric_linechart_max = Math.max.apply(Math, each_numeric_linechart[0]);
          this.drawBasicBars('#thumb_' + (i + 1), each_numeric_linechart[0], each_numeric_linechart[1], null, [250, 50]);
          this.drawBasicBars('#thumb_sm_' + (i + 1), each_numeric_linechart[0], each_numeric_linechart[1], null, [130, 15]);
          this.range_array[i] = new Array(2);
          this.range_array[i][0] = each_numeric_linechart_min;
          this.range_array[i][1] = each_numeric_linechart_max;
          step[i] = (each_numeric_linechart_max - each_numeric_linechart_min) / each_numeric_linechart[1].length;
          $('#slider_' + (i + 1)).width($('#thumb_' + (i + 1) + ' svg').attr('width') - 2);
          $("#slider_" + (i + 1)).slider({
            range: true,
            min: each_numeric_linechart_min,
            max: each_numeric_linechart_max,
            step: (each_numeric_linechart_max - each_numeric_linechart_min) / each_numeric_linechart[1].length,
            values: [each_numeric_linechart_min, each_numeric_linechart_max],
            slide: function(event, ui) {
              var id, leftValue, order, rightValue;
              id = event.target.id.replace("slider_", "");
              if (ui.value === ui.values[0]) {
                order = Math.round((ui.values[0] - _this.lines_array[id - 1][0][0]) / step[id - 1]);
                leftValue = _this.lines_array[id - 1][0][order];
                _this.range_array[id - 1][0] = leftValue;
                $("#range_" + id + "_left").text(leftValue).css('margin-left', Math.max(event.clientX - 40, 20));
                $("#range_" + id + "_new").text("range: [" + leftValue + " — " + _this.range_array[id - 1][1] + "]");
              } else {
                order = Math.floor((ui.values[1] - _this.lines_array[id - 1][0][0]) / step[id - 1]) - 1;
                rightValue = _this.lines_array[id - 1][0][order];
                _this.range_array[id - 1][1] = rightValue;
                $("#range_" + id + "_right").text(rightValue).css('margin-left', Math.min(event.clientX - 40, 270));
                $("#range_" + id + "_new").text("range: [" + _this.range_array[id - 1][0] + " — " + rightValue + "]");
              }
              $('#numeric_check_' + id).prop('checked', true);
              _this.drawBasicBars('#thumb_sm_' + id, _this.lines_array[id - 1][0], _this.lines_array[id - 1][1], _this.range_array[id - 1], [130, 15]);
              return _this.livePreview();
            }
          });
          $("#range_" + (i + 1) + "_left").text(each_numeric_linechart_min);
          $("#range_" + (i + 1) + "_right").text(each_numeric_linechart_max);
          _results.push($("#range_" + (i + 1) + "_new").text("range: [" + each_numeric_linechart_min + " — " + each_numeric_linechart_max + "]"));
        }
        return _results;
      }
    };

    filter.prototype.livePreview = function() {
      var content, current_timeStamp, delete_index, flag, formatted_timeStamp, i, j, k, key, r, selected_range_array, _i, _j, _k, _l, _m, _n, _o, _p, _q, _r, _ref, _ref1, _ref10, _ref11, _ref12, _ref13, _ref14, _ref15, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8, _ref9, _s, _t, _u, _v, _w, _x;
      this.selected_sample = [];
      this.selected_groupable_array = [];
      this.selected_attributes_array = [];
      this.selected_no_data_attributes_array = [];
      selected_range_array = [];
      if (attributes_array.length > 0) {
        for (i = _i = 1, _ref = attributes_array.length; 1 <= _ref ? _i <= _ref : _i >= _ref; i = 1 <= _ref ? ++_i : --_i) {
          if ($('#numeric_check_' + i).is(':checked')) {
            this.selected_attributes_array.push(attributes_array[i - 1]);
          }
        }
      }
      if (no_data_attributes_array.length > 0) {
        for (i = _j = 1, _ref1 = no_data_attributes_array.length; 1 <= _ref1 ? _j <= _ref1 : _j >= _ref1; i = 1 <= _ref1 ? ++_j : --_j) {
          if ($('#non_numeric_check_' + i).is(':checked')) {
            this.selected_no_data_attributes_array.push(no_data_attributes_array[i - 1]);
          }
        }
      }
      if (groupable_array_content.length > 0) {
        for (i = _k = 1, _ref2 = groupable_array_content.length; 1 <= _ref2 ? _k <= _ref2 : _k >= _ref2; i = 1 <= _ref2 ? ++_k : --_k) {
          if ($('#groupable_check_' + i).is(':checked')) {
            this.selected_groupable_array.push(groupable_array_content[i - 1]);
          }
        }
      }
      if (this.range_array.length > 0) {
        for (i = _l = 1, _ref3 = this.range_array.length; 1 <= _ref3 ? _l <= _ref3 : _l >= _ref3; i = 1 <= _ref3 ? ++_l : --_l) {
          if ($('#numeric_check_' + i).is(':checked')) {
            selected_range_array.push(this.range_array[i - 1]);
          }
        }
      }
      $('#right_live_panel').html("");
      for (i = _m = 0, _ref4 = biom.shape[1] - 1; 0 <= _ref4 ? _m <= _ref4 : _m >= _ref4; i = 0 <= _ref4 ? ++_m : --_m) {
        this.selected_sample.push(i);
      }
      if (selected_range_array.length > 0) {
        for (i = _n = 0, _ref5 = selected_range_array.length - 1; 0 <= _ref5 ? _n <= _ref5 : _n >= _ref5; i = 0 <= _ref5 ? ++_n : --_n) {
          key = this.selected_attributes_array[i];
          for (r = _o = 0, _ref6 = biom.shape[1] - 1; 0 <= _ref6 ? _o <= _ref6 : _o >= _ref6; r = 0 <= _ref6 ? ++_o : --_o) {
            if (biom.columns[r].metadata[key].split(" ")[0] < selected_range_array[i][0] || biom.columns[r].metadata[key].split(" ")[0] > selected_range_array[i][1]) {
              delete_index = this.selected_sample.indexOf(r);
              if (delete_index !== -1) {
                this.selected_sample.splice(delete_index, 1);
              }
            }
          }
        }
      }
      if (date_array.length > 0) {
        for (i = _p = 0, _ref7 = date_array.length - 1; 0 <= _ref7 ? _p <= _ref7 : _p >= _ref7; i = 0 <= _ref7 ? ++_p : --_p) {
          key = date_array[i];
          for (r = _q = 0, _ref8 = biom.shape[1] - 1; 0 <= _ref8 ? _q <= _ref8 : _q >= _ref8; r = 0 <= _ref8 ? ++_q : --_q) {
            current_timeStamp = biom.columns[r].metadata[key];
            if (current_timeStamp.length < 11) {
              formatted_timeStamp = moment(current_timeStamp).utc().format("X");
            } else {
              formatted_timeStamp = moment(current_timeStamp, "YYYY-MM-DDTHH:mm:ss Z").utc().format("X");
            }
            if (formatted_timeStamp < this.range_dates_array[i][0] || formatted_timeStamp > this.range_dates_array[i][1]) {
              delete_index = this.selected_sample.indexOf(r);
              if (delete_index !== -1) {
                this.selected_sample.splice(delete_index, 1);
              }
            }
          }
        }
      }
      if (groupable_array.length > 0) {
        for (i = _r = 0, _ref9 = groupable_array.length - 1; 0 <= _ref9 ? _r <= _ref9 : _r >= _ref9; i = 0 <= _ref9 ? ++_r : --_r) {
          for (k = _s = 0, _ref10 = biom.shape[1] - 1; 0 <= _ref10 ? _s <= _ref10 : _s >= _ref10; k = 0 <= _ref10 ? ++_s : --_s) {
            flag = true;
            if (this.selected_groupable_array.length > 0) {
              for (r = _t = 0, _ref11 = this.selected_groupable_array.length - 1; 0 <= _ref11 ? _t <= _ref11 : _t >= _ref11; r = 0 <= _ref11 ? ++_t : --_t) {
                if (biom.columns[k].metadata[groupable_array[i]] === this.selected_groupable_array[r]) {
                  flag = false;
                  break;
                }
              }
              if (flag) {
                delete_index = this.selected_sample.indexOf(k);
                if (delete_index !== -1) {
                  this.selected_sample.splice(delete_index, 1);
                }
              }
            } else if (this.selected_groupable_array.length === 0) {
              this.selected_sample = [];
            }
          }
        }
      }
      delete_index = [];
      if (this.selected_sample.length > 0) {
        for (i = _u = 0, _ref12 = this.selected_sample.length - 1; 0 <= _ref12 ? _u <= _ref12 : _u >= _ref12; i = 0 <= _ref12 ? ++_u : --_u) {
          flag = true;
          if (columns_non_empty_sample_count.length > 1) {
            for (j = _v = 0, _ref13 = columns_non_empty_sample_count.length - 1; 0 <= _ref13 ? _v <= _ref13 : _v >= _ref13; j = 0 <= _ref13 ? ++_v : --_v) {
              if (columns_non_empty_sample_count[j] === this.selected_sample[i]) {
                flag = false;
                break;
              }
            }
            if (flag) {
              delete_index.push(this.selected_sample[i]);
              console.log('Sample ' + (i + 1) + ' has 0 count');
            }
          }
        }
      }
      if (delete_index.length > 0) {
        for (i = _w = 0, _ref14 = delete_index.length - 1; 0 <= _ref14 ? _w <= _ref14 : _w >= _ref14; i = 0 <= _ref14 ? ++_w : --_w) {
          this.selected_sample.splice(this.selected_sample.indexOf(delete_index[i]), 1);
        }
      }
      content = "<table id='myTable'><thead><tr><th class = 'headerID myTableHeader'>ID</th><th class = 'headerID myTableHeader'>Sample ID" + "</th><th class='myTableHeader'>Sample Name</th><th class='headerCount myTableHeader'>Count</th></thead>";
      if (this.selected_sample.length > 0) {
        for (i = _x = 0, _ref15 = this.selected_sample.length - 1; 0 <= _ref15 ? _x <= _ref15 : _x >= _ref15; i = 0 <= _ref15 ? ++_x : --_x) {
          content += '<tr><td>' + i + '</td><td>' + this.selected_sample[i] + '</td><td>' + columns_sample_name_array[this.selected_sample[i]] + '</td><td>' + columns_sample_count_list[this.selected_sample[i]] + '</td></tr>';
        }
      }
      content += "</table>";
      $("#right_live_panel").append(content);
      $('#myTable').dataTable({
        "iDisplayLength": 50,
        "oLanguage": {
          "sLengthMenu": "",
          "sZeroRecords": "Nothing found - sorry",
          "sInfo": "Showing _START_ to _END_ of _TOTAL_ Samples",
          "sInfoEmpty": "Showing 0 to 0 of 0 Samples",
          "sInfoFiltered": "(filtered from _MAX_ total samples)"
        }
      });
      return console.log('selected_sample: ' + this.selected_sample.length);
    };

    filter.prototype.downloadPinch = function() {
      var blob, flag, i, index, j, k, obj, pinch, pinch_data_matrix, sum_rows, valid_rows_count, _i, _j, _k, _l, _m, _n, _o, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6;
      pinch = biom;
      pinch.generated_by = 'Phinch 1.0';
      pinch.date = new Date();
      pinch_data_matrix = [];
      sum_rows = new Array(biom.shape[0]);
      for (i = _i = 0, _ref = biom.shape[0] - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        sum_rows[i] = 0;
      }
      index = 0;
      for (i = _j = 0, _ref1 = biom.data.length - 1; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; i = 0 <= _ref1 ? ++_j : --_j) {
        flag = false;
        for (j = _k = 0, _ref2 = this.selected_sample.length - 1; 0 <= _ref2 ? _k <= _ref2 : _k >= _ref2; j = 0 <= _ref2 ? ++_k : --_k) {
          if (biom.data[i][1] === this.selected_sample[j]) {
            flag = true;
            break;
          }
        }
        if (flag) {
          pinch_data_matrix[index] = new Array(3);
          pinch_data_matrix[index] = [biom.data[i][0], j, biom.data[i][2]];
          sum_rows[biom.data[i][0]] += biom.data[i][2];
          index++;
        }
      }
      pinch.data = pinch_data_matrix;
      for (i = _l = 0, _ref3 = biom.shape[1] - 1; 0 <= _ref3 ? _l <= _ref3 : _l >= _ref3; i = 0 <= _ref3 ? ++_l : --_l) {
        for (j = _m = 0, _ref4 = no_data_attributes_array.length - 1; 0 <= _ref4 ? _m <= _ref4 : _m >= _ref4; j = 0 <= _ref4 ? ++_m : --_m) {
          if (this.selected_no_data_attributes_array.indexOf(no_data_attributes_array[j]) === -1) {
            this.removeFromObjectByKey(pinch.columns[i].metadata, no_data_attributes_array[j]);
          }
        }
        for (k = _n = 0, _ref5 = attributes_array.length - 1; 0 <= _ref5 ? _n <= _ref5 : _n >= _ref5; k = 0 <= _ref5 ? ++_n : --_n) {
          if (this.selected_attributes_array.indexOf(attributes_array[k]) === -1) {
            this.removeFromObjectByKey(pinch.columns[i].metadata, attributes_array[k]);
          }
        }
      }
      valid_rows_count = 0;
      for (i = _o = 0, _ref6 = sum_rows.length - 1; 0 <= _ref6 ? _o <= _ref6 : _o >= _ref6; i = 0 <= _ref6 ? ++_o : --_o) {
        if (parseInt(sum_rows[i]) > 0) {
          valid_rows_count++;
        } else {
          pinch.rows[i].metadata.taxonomy = ["k__", "p__", "c__", "o__", "f__", "g__", "s__"];
        }
      }
      pinch.shape[1] = this.selected_sample.length;
      obj = JSON.stringify(pinch);
      blob = new Blob([obj], {
        type: "text/plain;charset=utf-8"
      });
      return saveAs(blob, filename + ".phinch");
    };

    filter.prototype.check_unique = function(arr) {
      arr = $.grep(arr, function(v, k) {
        return $.inArray(v, arr) === k;
      });
      if (arr.length === 1) {
        return true;
      } else {
        return false;
      }
    };

    filter.prototype.sortByFrequency = function(arr) {
      var a, b, i, prev, _i, _ref;
      a = [];
      b = [];
      arr.sort(this.numberSort);
      for (i = _i = 0, _ref = arr.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        if (arr[i] !== prev) {
          a.push(arr[i]);
          b.push(1);
        } else {
          b[b.length - 1]++;
        }
        prev = arr[i];
      }
      return [a, b];
    };

    filter.prototype.numberSort = function(a, b) {
      return a - b;
    };

    filter.prototype.removeFromObjectByKey = function(thisObject, key) {
      return delete thisObject[key];
    };

    filter.prototype.drawBasicBars = function(div, each_numeric_linechart0, each_numeric_linechart1, values, size) {
      var eachBarWidth, max_single, tempBar, tempViz, tooltipOverPanel, y;
      d3.select(div + " svg").remove();
      max_single = d3.max(each_numeric_linechart1);
      y = d3.scale.linear().domain([0, max_single]).range([1, size[1]]);
      eachBarWidth = (size[0] + 2) / each_numeric_linechart1.length - 2;
      tooltipOverPanel = d3.select(div).append("div").attr('class', 'tooltipOverSmallThumb').style("visibility", "hidden");
      tempViz = d3.select(div).append("svg").attr("width", size[0]).attr("height", size[1]);
      return tempBar = tempViz.selectAll('rect').data(each_numeric_linechart1).enter().append("rect").attr('height', function(d) {
        return y(d);
      }).attr('width', eachBarWidth + 'px').attr('x', function(d, i) {
        return i * (eachBarWidth + 2);
      }).attr('y', function(d, i) {
        return size[1] - y(d);
      }).attr('fill', function(d, i) {
        if (values === null) {
          return '#444';
        } else if (values !== null && each_numeric_linechart0[i] >= values[0] && each_numeric_linechart0[i] <= values[1]) {
          return '#adccd5';
        } else {
          return '#aaa';
        }
      }).on('mouseover', function(d, i) {
        tooltipOverPanel.html('Value: ' + each_numeric_linechart0[i] + ', Freq: ' + d);
        return tooltipOverPanel.style({
          "visibility": "visible",
          top: d3.event.pageY + "px",
          left: (d3.event.pageX + 10) + "px"
        });
      }).on('mouseout', function(d) {
        return tooltipOverPanel.style("visibility", "hidden");
      });
    };

    return filter;

  })();

  window.filter = filter;

}).call(this);
