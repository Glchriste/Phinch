// Generated by CoffeeScript 1.6.3
(function() {
  var taxonomyViz;

  taxonomyViz = (function() {
    var LayerID, VizID, columns_sample_name_array, deleteOTUArr, deleteSampleArr, fillCol, format, g_scale, new_data_matrix, new_data_matrix_onLayer, percentage, sumEachCol, sumEachTax, unique_taxonomy_comb, unique_taxonomy_comb_onLayer, vizdata;

    fillCol = ['#3182bd', '#6baed6', '#9ecae1', '#c6dbef', '#e6550d', '#fd8d3c', '#fdae6b', '#fdd0a2', '#31a354', '#74c476', '#a1d99b', '#c7e9c0', '#756bb1', '#9e9ac8', '#bcbddc', '#dadaeb', '#636363', '#969696', '#bdbdbd', '#d9d9d9'];

    new_data_matrix = [];

    columns_sample_name_array = [];

    unique_taxonomy_comb = [];

    deleteOTUArr = [];

    deleteSampleArr = [];

    g_scale = 1;

    percentage = false;

    LayerID = 2;

    VizID = null;

    vizdata = null;

    sumEachCol = null;

    sumEachTax = null;

    new_data_matrix_onLayer = null;

    unique_taxonomy_comb_onLayer = null;

    format = d3.format(',d');

    function taxonomyViz(_VizID) {
      var _this = this;
      VizID = _VizID;
      db.open({
        server: "BiomSample",
        version: 1,
        schema: {
          "biomSample": {
            key: {
              keyPath: 'id',
              autoIncrement: true
            }
          }
        }
      }).done(function(s) {
        return s.biomSample.query().all().execute().done(function(results) {
          _this.selected_samples = results[results.length - 1].selected_sample;
          _this.groupable = results[results.length - 1].groupable;
          _this.selected_groupable_array = results[results.length - 1].selected_groupable_array;
          _this.selected_attributes_array = results[results.length - 1].selected_attributes_array;
          return db.open({
            server: "BiomData",
            version: 1,
            schema: {
              "biom": {
                key: {
                  keyPath: 'id',
                  autoIncrement: true
                }
              }
            }
          }).done(function(s) {
            return s.biom.query().all().execute().done(function(results) {
              var currentData;
              currentData = results[results.length - 1];
              _this.biom = JSON.parse(currentData.data);
              $("#file_numbers").html("");
              $("#file_numbers").append("File: " + currentData.name + ", Size: " + (parseFloat(currentData.size.valueOf() / 1000000)).toFixed(1) + " MB <br/><br/>Observation: " + _this.biom.shape[0] + ", Selected sample: " + _this.selected_samples.length);
              $('.layer_change').click(function(evt) {
                LayerID = parseInt(evt.currentTarget.id.replace("layer_", ""));
                return $('#layer_' + LayerID).addClass("loading_notes").delay(800).queue(function(n) {
                  if ($('#otherFuncs li:eq(1) .c option:selected').val() === 'Percent') {
                    percentage = true;
                  } else {
                    percentage = false;
                  }
                  _this.generateVizData();
                  return n();
                });
              });
              $('#otherFuncs li:eq(1) .c select').change(function(evt) {
                if (evt.currentTarget.value === 'Percent') {
                  percentage = true;
                } else {
                  percentage = false;
                }
                LayerID = parseInt($('.current_layer').attr('id').replace('layer_', ''));
                return _this.generateVizData();
              });
              _this.prepareData();
              return _this.generateVizData();
            });
          });
        });
      });
    }

    taxonomyViz.prototype.prepareData = function() {
      var comb_len, comp_i, flag, i, j, map_array, unique_taxonomy_comb_count, _i, _j, _k, _l, _m, _n, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _results;
      unique_taxonomy_comb_count = [];
      map_array = [];
      for (i = _i = 0, _ref = this.biom.rows.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        flag = true;
        comp_i = new Array(7);
        comb_len = unique_taxonomy_comb.length;
        if (this.biom.rows[i].metadata.taxonomy.indexOf(';') !== -1) {
          comp_i = this.biom.rows[i].metadata.taxonomy.replace(/\s+/g, '').replace(/;/g, ',').split(',');
        } else {
          comp_i = this.biom.rows[i].metadata.taxonomy;
        }
        if (comp_i[0].indexOf('k__') === -1) {
          comp_i[0] = 'k__';
        }
        switch (comp_i.length) {
          case 6:
            comp_i = [comp_i[0], comp_i[1], comp_i[2], comp_i[3], comp_i[4], comp_i[5], 's__'];
            break;
          case 5:
            comp_i = [comp_i[0], comp_i[1], comp_i[2], comp_i[3], comp_i[4], 'g__', 's__'];
            break;
          case 4:
            comp_i = [comp_i[0], comp_i[1], comp_i[2], comp_i[3], 'f__', 'g__', 's__'];
            break;
          case 3:
            comp_i = [comp_i[0], comp_i[1], comp_i[2], 'o__', 'f__', 'g__', 's__'];
            break;
          case 2:
            comp_i = [comp_i[0], comp_i[1], 'c__', 'o__', 'f__', 'g__', 's__'];
            break;
          case 1:
            comp_i = [comp_i[0], 'p__', 'c__', 'o__', 'f__', 'g__', 's__'];
            break;
          case 0:
            comp_i = ['k__', 'p__', 'c__', 'o__', 'f__', 'g__', 's__'];
        }
        if (comb_len > 0) {
          for (j = _j = 0, _ref1 = comb_len - 1; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; j = 0 <= _ref1 ? ++_j : --_j) {
            if (comp_i[0] === unique_taxonomy_comb[j][0] && comp_i[1] === unique_taxonomy_comb[j][1] && comp_i[2] === unique_taxonomy_comb[j][2] && comp_i[3] === unique_taxonomy_comb[j][3] && comp_i[4] === unique_taxonomy_comb[j][4] && comp_i[5] === unique_taxonomy_comb[j][5] && comp_i[6] === unique_taxonomy_comb[j][6]) {
              unique_taxonomy_comb_count[j]++;
              map_array[i] = j;
              flag = false;
              break;
            }
          }
        }
        if (flag) {
          map_array[i] = comb_len;
          unique_taxonomy_comb_count[comb_len] = 1;
          unique_taxonomy_comb[comb_len] = comp_i;
        }
      }
      for (i = _k = 0, _ref2 = unique_taxonomy_comb.length - 1; 0 <= _ref2 ? _k <= _ref2 : _k >= _ref2; i = 0 <= _ref2 ? ++_k : --_k) {
        new_data_matrix[i] = [];
        for (j = _l = 0, _ref3 = this.biom.shape[1] - 1; 0 <= _ref3 ? _l <= _ref3 : _l >= _ref3; j = 0 <= _ref3 ? ++_l : --_l) {
          new_data_matrix[i][j] = 0;
        }
      }
      for (i = _m = 0, _ref4 = this.biom.data.length - 1; 0 <= _ref4 ? _m <= _ref4 : _m >= _ref4; i = 0 <= _ref4 ? ++_m : --_m) {
        new_data_matrix[map_array[this.biom.data[i][0]]][this.biom.data[i][1]] += this.biom.data[i][2];
      }
      _results = [];
      for (i = _n = 0, _ref5 = this.biom.shape[1] - 1; 0 <= _ref5 ? _n <= _ref5 : _n >= _ref5; i = 0 <= _ref5 ? ++_n : --_n) {
        _results.push(columns_sample_name_array.push(this.biom.columns[i].id));
      }
      return _results;
    };

    taxonomyViz.prototype.generateVizData = function() {
      var comp_i, flag, flag_count, i, j, k, map_array, _i, _j, _k, _l, _m, _n, _o, _p, _q, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8,
        _this = this;
      unique_taxonomy_comb_onLayer = [];
      new_data_matrix_onLayer = [];
      map_array = [];
      if (LayerID < 7) {
        for (i = _i = 0, _ref = unique_taxonomy_comb.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
          comp_i = unique_taxonomy_comb[i];
          flag = true;
          if (unique_taxonomy_comb_onLayer.length > 0) {
            for (j = _j = 0, _ref1 = unique_taxonomy_comb_onLayer.length - 1; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; j = 0 <= _ref1 ? ++_j : --_j) {
              flag_count = 0;
              for (k = _k = 0, _ref2 = LayerID - 1; 0 <= _ref2 ? _k <= _ref2 : _k >= _ref2; k = 0 <= _ref2 ? ++_k : --_k) {
                if (comp_i[k] === unique_taxonomy_comb_onLayer[j][k]) {
                  flag_count++;
                }
              }
              if (flag_count === LayerID) {
                map_array[i] = j;
                flag = false;
                break;
              }
            }
          }
          if (flag) {
            map_array[i] = unique_taxonomy_comb_onLayer.length;
            switch (LayerID) {
              case 6:
                comp_i = [comp_i[0], comp_i[1], comp_i[2], comp_i[3], comp_i[4], comp_i[5], 's__'];
                break;
              case 5:
                comp_i = [comp_i[0], comp_i[1], comp_i[2], comp_i[3], comp_i[4], 'g__', 's__'];
                break;
              case 4:
                comp_i = [comp_i[0], comp_i[1], comp_i[2], comp_i[3], 'f__', 'g__', 's__'];
                break;
              case 3:
                comp_i = [comp_i[0], comp_i[1], comp_i[2], 'o__', 'f__', 'g__', 's__'];
                break;
              case 2:
                comp_i = [comp_i[0], comp_i[1], 'c__', 'o__', 'f__', 'g__', 's__'];
            }
            unique_taxonomy_comb_onLayer[unique_taxonomy_comb_onLayer.length] = comp_i;
          }
        }
        for (i = _l = 0, _ref3 = unique_taxonomy_comb_onLayer.length - 1; 0 <= _ref3 ? _l <= _ref3 : _l >= _ref3; i = 0 <= _ref3 ? ++_l : --_l) {
          new_data_matrix_onLayer[i] = [];
          for (j = _m = 0, _ref4 = new_data_matrix[0].length - 1; 0 <= _ref4 ? _m <= _ref4 : _m >= _ref4; j = 0 <= _ref4 ? ++_m : --_m) {
            new_data_matrix_onLayer[i][j] = 0;
          }
        }
        for (i = _n = 0, _ref5 = new_data_matrix.length - 1; 0 <= _ref5 ? _n <= _ref5 : _n >= _ref5; i = 0 <= _ref5 ? ++_n : --_n) {
          for (j = _o = 0, _ref6 = new_data_matrix[0].length - 1; 0 <= _ref6 ? _o <= _ref6 : _o >= _ref6; j = 0 <= _ref6 ? ++_o : --_o) {
            new_data_matrix_onLayer[map_array[i]][j] += new_data_matrix[i][j];
          }
        }
      } else {
        unique_taxonomy_comb_onLayer = unique_taxonomy_comb;
        new_data_matrix_onLayer = new_data_matrix;
      }
      if (VizID === 0) {
        this.filterControl();
        return this.drawD3Bar();
      } else if (VizID === 1) {
        return this.drawTaxonomyBubble();
      } else if (VizID === 2) {
        return this.drawTaxonomySankey();
      } else if (VizID === 3) {
        if (this.groupable.length > 1) {
          for (i = _p = 0, _ref7 = this.groupable.length - 1; 0 <= _ref7 ? _p <= _ref7 : _p >= _ref7; i = 0 <= _ref7 ? ++_p : --_p) {
            $('#attributes_dropdown').append('<option>' + this.groupable[i] + '</option>');
          }
          if ($('#attributes_dropdown option:first').text() !== void 0) {
            this.drawTaxonomyDonuts($('#attributes_dropdown').find(":selected").text());
          } else {
            this.drawTaxonomyDonuts(this.groupable[0]);
          }
          $('#attributes_dropdown').fadeIn(800);
          return $('#attributes_dropdown').change(function(evt) {
            return _this.drawTaxonomyDonuts(evt.currentTarget.value);
          });
        } else if (this.groupable.length === 1) {
          $('#attributes_dropdown').hide();
          return this.drawTaxonomyDonuts(this.groupable[0]);
        } else {
          return alert("Groupable chart not available for this dataset!");
        }
      } else if (VizID === 4) {
        d3.select('#viz_container').append('div').attr('id', 'countResult');
        if (this.selected_attributes_array.length > 0) {
          for (i = _q = 0, _ref8 = this.selected_attributes_array.length - 1; 0 <= _ref8 ? _q <= _ref8 : _q >= _ref8; i = 0 <= _ref8 ? ++_q : --_q) {
            $('#attributes_dropdown').append('<option>' + this.selected_attributes_array[i] + '</option>');
          }
          if ($('#attributes_dropdown option:first').text() !== void 0) {
            this.drawTaxonomyByAttributes($('#attributes_dropdown').find(":selected").text());
          } else {
            this.drawTaxonomyByAttributes(this.selected_attributes_array[0]);
          }
          return $('#attributes_dropdown').change(function(evt) {
            return _this.drawTaxonomyByAttributes(evt.currentTarget.value);
          });
        } else {
          return alert("Not supported!");
        }
      } else if (VizID === 5) {
        return alert("under construction!");
      }
    };

    taxonomyViz.prototype.drawD3Bar = function() {
      var i, j, selectedSampleCopy, _i, _j, _k, _l, _m, _ref, _ref1, _ref2, _ref3, _ref4;
      selectedSampleCopy = this.selected_samples.slice(0);
      vizdata = null;
      vizdata = new Array(new_data_matrix_onLayer.length);
      sumEachTax = null;
      sumEachTax = new Array(new_data_matrix_onLayer.length);
      if (deleteSampleArr.length > 0) {
        for (i = _i = 0, _ref = deleteSampleArr.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
          selectedSampleCopy.splice(selectedSampleCopy.indexOf(deleteSampleArr[i]), 1);
        }
      }
      for (i = _j = 0, _ref1 = new_data_matrix_onLayer.length - 1; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; i = 0 <= _ref1 ? ++_j : --_j) {
        vizdata[i] = new Array(selectedSampleCopy.length);
        sumEachTax[i] = 0;
        for (j = _k = 0, _ref2 = selectedSampleCopy.length - 1; 0 <= _ref2 ? _k <= _ref2 : _k >= _ref2; j = 0 <= _ref2 ? ++_k : --_k) {
          vizdata[i][j] = new Object();
          vizdata[i][j].x = selectedSampleCopy[j];
          vizdata[i][j].i = i;
          if (deleteOTUArr.indexOf(i) === -1) {
            vizdata[i][j].y = new_data_matrix_onLayer[i][selectedSampleCopy[j]];
            sumEachTax[i] += new_data_matrix_onLayer[i][selectedSampleCopy[j]];
          } else {
            vizdata[i][j].y = 0;
          }
          vizdata[i][j].name = unique_taxonomy_comb_onLayer[i][0] + ',' + unique_taxonomy_comb_onLayer[i][1] + ',' + unique_taxonomy_comb_onLayer[i][2] + ',' + unique_taxonomy_comb_onLayer[i][3] + ',' + unique_taxonomy_comb_onLayer[i][4] + ',' + unique_taxonomy_comb_onLayer[i][5] + ',' + unique_taxonomy_comb_onLayer[i][6];
        }
      }
      sumEachCol = null;
      sumEachCol = new Array(selectedSampleCopy.length);
      if (selectedSampleCopy.length > 0) {
        for (i = _l = 0, _ref3 = selectedSampleCopy.length - 1; 0 <= _ref3 ? _l <= _ref3 : _l >= _ref3; i = 0 <= _ref3 ? ++_l : --_l) {
          sumEachCol[i] = 0;
          for (j = _m = 0, _ref4 = new_data_matrix_onLayer.length - 1; 0 <= _ref4 ? _m <= _ref4 : _m >= _ref4; j = 0 <= _ref4 ? ++_m : --_m) {
            vizdata[j][i].y0 = sumEachCol[i];
            if (deleteOTUArr.indexOf(j) === -1) {
              sumEachCol[i] += new_data_matrix_onLayer[j][selectedSampleCopy[i]];
            }
          }
        }
      }
      return this.drawBasicBars();
    };

    taxonomyViz.prototype.drawBasicBars = function() {
      var delePanel, divCont, h, i, infoPanel, label, margin, max_single, rect, rule, svg, taxonomy, that, w, x, y, _i, _j, _ref, _ref1;
      that = this;
      this.fadeInOutCtrl();
      w = 1200;
      h = sumEachCol.length * 14 + 200;
      max_single = d3.max(sumEachCol);
      margin = {
        top: 100,
        right: 20,
        bottom: 20,
        left: 50
      };
      x = d3.scale.ordinal().domain(vizdata[0].map(function(d) {
        return d.x;
      })).rangeRoundBands([0, h - margin.top - margin.bottom]);
      y = d3.scale.linear().domain([0, max_single]).range([0, w - margin.right - margin.left - 50]);
      format = d3.format(',d');
      svg = d3.select("#taxonomy_container").append("svg").attr("width", w).attr("height", h).append("g").attr("transform", "translate(" + margin.left + "," + margin.top + ")");
      infoPanel = d3.select("#taxonomy_container").append("div").attr("class", "tooltipOverSmallThumb").style("visibility", "hidden");
      delePanel = d3.select("#taxonomy_container").append("div").attr("class", "tooltipOverSmallThumb").style("visibility", "hidden");
      taxonomy = svg.selectAll('g.taxonomy').data(vizdata).enter().append('g').attr('class', 'taxonomy').style('fill', function(d, i) {
        return fillCol[i % 20];
      }).on('mouseover', function(d, i) {
        var index;
        index = i;
        return d3.selectAll('g.taxonomy').style('fill', function(d, i) {
          if (i !== index) {
            return d3.rgb(fillCol[i % 20]).darker();
          } else {
            return fillCol[index % 20];
          }
        }).style('opacity', function(d, i) {
          if (i !== index) {
            return 0.2;
          }
        });
      }).on('mouseout', function(d, i) {
        return d3.selectAll('g.taxonomy').style('fill', function(d, i) {
          return fillCol[i % 20];
        }).style('opacity', 1);
      });
      rect = taxonomy.selectAll('rect').data(Object).enter().append('rect').attr('y', function(d, i) {
        return 14 * i;
      }).attr('x', function(d, i) {
        if (!percentage) {
          return y(d.y0);
        } else {
          return y(d.y0) / sumEachCol[i] * max_single;
        }
      }).attr('width', function(d, i) {
        if (!percentage) {
          return y(d.y);
        } else {
          return y(d.y) / sumEachCol[i] * max_single;
        }
      }).attr('height', 12).on('mouseover', function(d, i) {
        var content;
        content = '';
        content += '<div class="PanelHead">' + columns_sample_name_array[d.x] + '<br/>' + d.name + '</div><div class="PanelRule"></div>';
        content += '<div class="PanelvaluesContainer">In this sample:<br/><span class="PanelTtl">total occurrence<br/><b>' + format(sumEachCol[i]) + '</b></span><span class="PanelValue">this occurrence</br><b>' + format(d.y) + '</b></span><span class="PanelPercent">percent of total</br><b>' + (d.y / sumEachCol[i] * 100).toFixed(1) + '%</b></span>';
        content += 'Compared to all samples:<br/>';
        if (d.y / sumEachTax[d.i] * sumEachCol.length > 2) {
          content += '<div class="PanelSlider" style="width:' + (sumEachTax[d.i] / d.y / sumEachCol.length * 100) + '%;"></div><div class="PanelTrueValue" style="width:100%;"></div>';
        } else {
          content += '<div class="PanelSlider" style="width: 50%;"></div><div class="PanelTrueValue" style="width:' + (d.y / sumEachTax[d.i] * sumEachCol.length * 50) + '%;"></div>';
        }
        content += '<div><span class="PanelTtlAvg">total avg: ' + (100 / sumEachCol.length).toFixed(2) + '%</span>, this sample percent: ' + (d.y / sumEachTax[d.i] * 100).toFixed(2) + '%</div></div>';
        infoPanel.html(content);
        return infoPanel.style({
          "visibility": "visible",
          top: (d3.event.pageY - 10) + "px",
          left: (d3.event.pageX + 10) + "px"
        });
      }).on('mouseout', function(d, i) {
        return infoPanel.style({
          "visibility": "hidden"
        });
      }).on('click', function(d, i) {
        var content, k, _i, _ref;
        content = '';
        content = '<b><i>Remove sample ' + d.x + '?</i></b>&nbsp;&nbsp;<i class="icon-remove icon-large" id = "iconRemoverPanel"></i><div>';
        if (deleteSampleArr.length > 0) {
          content += '<br/>Deleted samples: <ul id = "deleteSampleArr">';
          for (k = _i = 0, _ref = deleteSampleArr.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; k = 0 <= _ref ? ++_i : --_i) {
            content += '<li><input type="checkbox" id="delete_' + deleteSampleArr[k] + '" checked /><label style="margin-top: 1px;" for="delete_' + deleteSampleArr[k] + '"></label>&nbsp;&nbsp;Sample ' + deleteSampleArr[k] + '</li>';
          }
          content += '</ul></div>';
        }
        delePanel.html(content);
        delePanel.style({
          "visibility": "visible",
          top: (d3.event.pageY - 10) + "px",
          left: (d3.event.pageX + 10) + "px"
        });
        infoPanel.style({
          "visibility": "hidden"
        });
        $('#iconRemoverPanel').click(function() {
          deleteSampleArr.push(d.x);
          return that.drawD3Bar();
        });
        return $('#deleteSampleArr li').each(function(index) {
          return $(this).click(function() {
            var thisSampID;
            thisSampID = parseInt($(this)[0].children[0].id.replace('delete_', ''));
            if ($('#delete_' + thisSampID).is(':checked')) {
              $('#delete_' + thisSampID).prop("checked", false);
              deleteSampleArr.splice(deleteSampleArr.indexOf(thisSampID), 1);
            } else {
              $('#delete_' + thisSampID).prop("checked", true);
              deleteSampleArr.push(thisSampID);
            }
            return that.drawD3Bar();
          });
        });
      });
      label = svg.selectAll('text').data(x.domain()).enter().append('text').text(function(d, i) {
        if (i % 2 === 1) {
          return d;
        }
      }).attr('x', -20).attr('y', function(d, i) {
        return 14 * i + 9;
      }).attr('text-anchor', 'middle').attr("font-size", "9px").attr('fill', '#444');
      rule = svg.selectAll('g.rule').data(y.ticks(10)).enter().append('g').attr('class', 'rule').attr('transform', function(d) {
        return "translate(" + y(d) + ", 0)";
      });
      rule.append('line').attr('y2', h - 180).style("stroke", function(d) {
        if (d) {
          return "#eee";
        } else {
          return "#444";
        }
      }).style("stroke-opacity", function(d) {
        if (d) {
          return 0.7;
        } else {
          return null;
        }
      });
      rule.append('text').attr('y', -15).attr("font-size", "9px").attr('text-anchor', 'middle').attr('fill', '#444').text(function(d, i) {
        if (!percentage) {
          return format(d);
        } else {
          return Math.round(i / (y.ticks(10).length) * 100) + '%';
        }
      });
      divCont = '';
      if (!percentage) {
        for (i = _i = 0, _ref = sumEachCol.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
          divCont += '<div class="fake" style="width:' + y(sumEachCol[i]) + 'px;"></div>';
        }
      } else {
        for (i = _j = 0, _ref1 = sumEachCol.length - 1; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; i = 0 <= _ref1 ? ++_j : --_j) {
          divCont += '<div class="fake" style="width:' + y(max_single) + 'px;"></div>';
        }
      }
      $('#fake_taxonomy_container').html(divCont);
      $('#viz_container').append('<canvas id="outline" width="150" height="' + (window.innerHeight - 280) + '"></canvas>');
      if (this.selected_samples.length > 20) {
        return $('#outline').fracs('outline', {
          crop: true,
          styles: [
            {
              selector: 'section',
              fillStyle: 'rgb(230,230,230)'
            }, {
              selector: '#header, #file_details, #autoCompleteList',
              fillStyle: 'rgb(68,68,68)'
            }, {
              selector: '.fake',
              fillStyle: 'rgb(255,193,79)'
            }
          ],
          viewportStyle: {
            fillStyle: 'rgba(29,119,194,0.3)'
          },
          viewportDragStyle: {
            fillStyle: 'rgba(29,119,194,0.4)'
          }
        });
      }
    };

    taxonomyViz.prototype.filterControl = function() {
      var availableTags, i, searchList, that, _i, _ref;
      that = this;
      availableTags = new Array(unique_taxonomy_comb_onLayer.length);
      for (i = _i = 0, _ref = unique_taxonomy_comb_onLayer.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        availableTags[i] = unique_taxonomy_comb_onLayer[i][0] + ',' + unique_taxonomy_comb_onLayer[i][1] + ',' + unique_taxonomy_comb_onLayer[i][2] + ',' + unique_taxonomy_comb_onLayer[i][3] + ',' + unique_taxonomy_comb_onLayer[i][4] + ',' + unique_taxonomy_comb_onLayer[i][5] + ',' + unique_taxonomy_comb_onLayer[i][6];
      }
      searchList = [];
      $('#autoCompleteList').fadeOut(800);
      return $("#tags").autocomplete({
        source: availableTags,
        minLength: 3,
        response: function(evt, ui) {
          var content, _j, _k, _ref1, _ref2;
          $('#autoCompleteList').html("");
          searchList.length = 0;
          if (ui.content.length > 0) {
            for (i = _j = 0, _ref1 = ui.content.length - 1; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; i = 0 <= _ref1 ? ++_j : --_j) {
              searchList.push(ui.content[i].value);
            }
            content = '<i class="icon-remove icon-large" style="float:right; margin-right: 5px;" id = "iconRemover"></i><ul>';
            for (i = _k = 0, _ref2 = searchList.length - 1; 0 <= _ref2 ? _k <= _ref2 : _k >= _ref2; i = 0 <= _ref2 ? ++_k : --_k) {
              if (deleteOTUArr.indexOf(i) !== -1) {
                content += '<li><span style = "display:block; background-color:#aaa; height: 12px; width: 12px; float: left; margin: 2px 0px;" ></span>&nbsp;&nbsp;';
                content += '<input type="checkbox" id="search_' + i + '"/><label style="margin-top: 1px;" for="search_' + i + '"></label>&nbsp;&nbsp;&nbsp;';
              } else {
                content += '<li><span style = "display:block; background-color:' + fillCol[availableTags.indexOf(searchList[i]) % 20] + '; height: 12px; width: 12px; float: left; margin: 2px 0px;" ></span>&nbsp;&nbsp;';
                content += '<input type="checkbox" id="search_' + i + '" checked /><label style="margin-top: 1px;" for="search_' + i + '"></label>&nbsp;&nbsp;&nbsp;';
              }
              content += searchList[i] + '</li>';
            }
            content += '</ul>';
            $('#autoCompleteList').append(content);
            $('#autoCompleteList ul li').each(function(index) {
              $(this).mouseout(function() {
                return d3.selectAll('g.taxonomy').filter(function(d, i) {
                  return i === index;
                }).style('fill', fillCol[index % 20]);
              });
              $(this).mouseover(function() {
                return d3.selectAll('g.taxonomy').filter(function(d, i) {
                  return i === index;
                }).style('fill', d3.rgb(fillCol[index % 20]).darker());
              });
              return $(this).click(function() {
                if ($('#search_' + index).is(':checked')) {
                  $('#search_' + index).prop("checked", false);
                  $(this).find('span').css('background-color', '#aaa');
                  $(this).css('color', '#aaa');
                  deleteOTUArr.push(index);
                } else {
                  $('#search_' + index).prop("checked", true);
                  $(this).find('span').css('background-color', fillCol[index % 20]);
                  $(this).css('color', '#000');
                  deleteOTUArr.splice(deleteOTUArr.indexOf(index), 1);
                }
                return that.drawD3Bar();
              });
            });
            $('#iconRemover').click(function() {
              return $('#autoCompleteList').fadeOut(200);
            });
            return $('#autoCompleteList').show();
          } else {
            $('#autoCompleteList').html("");
            return $('#autoCompleteList').hide();
          }
        }
      });
    };

    taxonomyViz.prototype.drawTaxonomyBubble = function() {
      var color, comb_name, comb_name_list, force, i, infoPanel, j, max_amount, max_single, node, nodes, radius_scale, removePanel, tooltip, tooltipOverPanel, vis, viz_series, xAxisLabels, y, _i, _j, _k, _l, _m, _ref, _ref1, _ref2, _ref3;
      this.fadeInOutCtrl();
      viz_series = new Array(unique_taxonomy_comb_onLayer.length);
      vizdata = new Array(unique_taxonomy_comb_onLayer.length);
      comb_name_list = new Array(unique_taxonomy_comb_onLayer.length);
      max_single = 0;
      for (i = _i = 0, _ref = unique_taxonomy_comb_onLayer.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        vizdata[i] = 0;
        viz_series[i] = new Array(this.selected_samples.length);
        comb_name_list[i] = [];
      }
      for (i = _j = 0, _ref1 = new_data_matrix_onLayer.length - 1; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; i = 0 <= _ref1 ? ++_j : --_j) {
        for (j = _k = 0, _ref2 = this.selected_samples.length - 1; 0 <= _ref2 ? _k <= _ref2 : _k >= _ref2; j = 0 <= _ref2 ? ++_k : --_k) {
          vizdata[i] += new_data_matrix_onLayer[i][this.selected_samples[j]];
          viz_series[i][j] = new_data_matrix_onLayer[i][this.selected_samples[j]];
          if (viz_series[i][j] > max_single) {
            max_single = viz_series[i][j];
          }
        }
        comb_name = "";
        for (j = _l = 0; _l <= 5; j = ++_l) {
          comb_name += unique_taxonomy_comb_onLayer[i][j] + ',';
        }
        comb_name += unique_taxonomy_comb_onLayer[i][6];
        comb_name_list[i] = comb_name;
      }
      nodes = [];
      color = d3.scale.category10();
      max_amount = d3.max(vizdata);
      radius_scale = d3.scale.pow().exponent(0.5).domain([0, max_amount]).range([3, 50]);
      for (i = _m = 0, _ref3 = new_data_matrix_onLayer.length - 1; 0 <= _ref3 ? _m <= _ref3 : _m >= _ref3; i = 0 <= _ref3 ? ++_m : --_m) {
        node = {
          id: i,
          radius: 100 * radius_scale(vizdata[i]),
          value: vizdata[i],
          name: comb_name_list[i],
          group: "medium",
          x: Math.random() * 1000,
          y: Math.random() * 600
        };
        nodes.push(node);
      }
      force = d3.layout.force().gravity(0.025 * LayerID).nodes(nodes).on("tick", function(e) {
        return node.attr("cx", function(d) {
          return d.x;
        }).attr("cy", function(d) {
          return d.y;
        });
      }).size([1200, 1000]).start();
      vis = d3.select("#taxonomy_container").append("svg").attr("width", 1500).attr("height", 1200);
      tooltip = d3.select("#taxonomy_container").append("div").attr("id", "pinch_tooltip").style("visibility", "hidden");
      infoPanel = d3.select("#taxonomy_container").append("div").attr("id", "pinch_pannel").style("visibility", "hidden");
      tooltipOverPanel = d3.select("#taxonomy_container").append("div").attr("id", "pinch_pannelTooltip").style("visibility", "hidden");
      removePanel = d3.select("#taxonomy_container").append('div').attr('id', "removePanel").style("visibility", "hidden");
      removePanel.append('i').attr('class', 'icon-remove icon-large');
      y = d3.scale.linear().domain([0, max_single]).range([1, 100]);
      xAxisLabels = this.selected_samples;
      node = vis.selectAll(".node").data(nodes).enter().append("circle").attr("class", "node").attr("cx", function(d) {
        return d.x;
      }).attr("cy", function(d) {
        return d.y;
      }).attr("r", function(d) {
        return d.radius / 100;
      }).style("fill", function(d, i) {
        return color(i % 10);
      }).style("opacity", 0.7).on('mouseover', function(d, i) {
        d3.select(this).style({
          opacity: '1',
          stroke: '#000',
          'stroke-width': '3'
        });
        tooltip.html("Taxonomy: " + d.name + "<br/> Total: " + vizdata[i]);
        return tooltip.style({
          "visibility": "visible",
          top: (d3.event.pageY - 10) + "px",
          left: (d3.event.pageX + 10) + "px"
        });
      }).on('mouseout', function(d) {
        d3.select(this).style({
          opacity: '0.7',
          stroke: 'none'
        });
        return tooltip.style("visibility", "hidden");
      }).on('click', function(d, i) {
        var barrect, circleUnderMouse, curColor, numberPerRow, txtrect;
        tooltip.style("visibility", "hidden");
        force.stop();
        circleUnderMouse = this;
        d3.select(this).transition().attr('cx', '100').attr('cy', '100').duration(750).ease("quad");
        d3.selectAll(".node").filter(function(d, i) {
          return this !== circleUnderMouse;
        }).transition().style("opacity", 0).attr('cx', '-100').attr('cy', '-100').duration(750).ease("quad");
        infoPanel.style("visibility", "visible");
        removePanel.style("visibility", 'visible');
        numberPerRow = 40;
        curColor = d3.select(this).style("fill");
        infoPanel.html('<br/><span>Taxonomy: ' + d.name + '</span><svg width="860px" height="' + Math.ceil(viz_series[i].length / numberPerRow + 1) * 100 + '"></svg>');
        barrect = infoPanel.select('svg').selectAll('rect').data(viz_series[i]);
        txtrect = infoPanel.select('svg').selectAll('text').data(xAxisLabels);
        txtrect.enter().append('text').text(function(d, i) {
          return d;
        }).attr("x", function(d, i) {
          return ((i % numberPerRow) * 21 + 22) + 'px';
        }).attr("y", function(d, i) {
          return 35 - y(d) + 100 * Math.floor(i / numberPerRow + 1);
        }).attr("font-size", "10px").style("fill", curColor);
        return barrect.enter().append('rect').attr('height', function(d) {
          return y(d);
        }).attr('width', '15px').attr("x", function(d, i) {
          return ((i % numberPerRow) * 21 + 21) + 'px';
        }).attr("y", function(d, i) {
          return 20 - y(d) + 100 * Math.floor(i / numberPerRow + 1);
        }).style("fill", curColor).on('mouseover', function(d, i) {
          tooltipOverPanel.style("visibility", "visible");
          tooltipOverPanel.html("Num: " + d);
          return tooltipOverPanel.style({
            "visibility": "visible",
            top: (d3.event.pageY - 10) + "px",
            left: (d3.event.pageX + 10) + "px"
          });
        }).on('mouseout', function(d) {
          return tooltipOverPanel.style("visibility", "hidden");
        });
      });
      return d3.select('#removePanel').on('click', function(d) {
        tooltip.style("display", "block");
        infoPanel.style("visibility", "hidden");
        removePanel.style("visibility", 'hidden');
        force.resume();
        return d3.selectAll(".node").transition().style({
          opacity: '0.7',
          stroke: 'none'
        }).attr("cx", function(d) {
          return d.x;
        }).attr("cy", function(d) {
          return d.y;
        }).duration(750).ease("quad");
      });
    };

    taxonomyViz.prototype.drawTaxonomySankey = function() {
      var color, height, i, infoPanel, j, link, margin, max_single, node, nodesArr, path, sankey, svg, taxonomySankey, tempLink, tempNode, width, yScale, yScaleReverse, _i, _j, _k, _l, _ref, _ref1, _ref2, _ref3;
      this.fadeInOutCtrl();
      nodesArr = [];
      sumEachTax = new Array(unique_taxonomy_comb_onLayer.length);
      taxonomySankey = new Object();
      taxonomySankey.nodes = [];
      taxonomySankey.links = [];
      if (unique_taxonomy_comb_onLayer.length > 0) {
        for (i = _i = 0, _ref = unique_taxonomy_comb_onLayer.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
          sumEachTax[i] = 0;
          for (j = _j = 0, _ref1 = this.selected_samples.length - 1; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; j = 0 <= _ref1 ? ++_j : --_j) {
            sumEachTax[i] += new_data_matrix_onLayer[i][this.selected_samples[j]];
          }
        }
        max_single = d3.max(sumEachTax);
        yScale = d3.scale.pow().exponent(.2).domain([0, max_single]).range([0, 10]);
        yScaleReverse = d3.scale.linear().domain([0, 10]).range([0, Math.pow(max_single, 0.2)]);
        for (i = _k = 0, _ref2 = unique_taxonomy_comb_onLayer.length - 1; 0 <= _ref2 ? _k <= _ref2 : _k >= _ref2; i = 0 <= _ref2 ? ++_k : --_k) {
          for (j = _l = 0, _ref3 = LayerID - 1; 0 <= _ref3 ? _l <= _ref3 : _l >= _ref3; j = 0 <= _ref3 ? ++_l : --_l) {
            if (nodesArr.indexOf(unique_taxonomy_comb_onLayer[i][j]) === -1) {
              nodesArr.push(unique_taxonomy_comb_onLayer[i][j]);
              tempNode = new Object();
              tempNode.name = unique_taxonomy_comb_onLayer[i][j];
              taxonomySankey.nodes.push(tempNode);
            }
            if (j > 0) {
              tempLink = new Object();
              tempLink.source = nodesArr.indexOf(unique_taxonomy_comb_onLayer[i][j - 1]);
              tempLink.target = nodesArr.indexOf(unique_taxonomy_comb_onLayer[i][j]);
              tempLink.value = yScale(sumEachTax[i]);
              tempLink.absValue = sumEachTax[i];
              taxonomySankey.links.push(tempLink);
            }
          }
        }
      }
      console.log(taxonomySankey);
      width = 1500;
      height = 20 * unique_taxonomy_comb_onLayer.length;
      margin = {
        top: 20,
        right: 10,
        bottom: 20,
        left: 100
      };
      color = d3.scale.category20();
      svg = d3.select("#taxonomy_container").append("svg").attr("width", width).attr("height", height).append("g").attr("transform", "translate(" + margin.left + "," + margin.top + ")");
      infoPanel = d3.select("#taxonomy_container").append("div").attr("class", "tooltipOverSmallThumb").style("visibility", "hidden");
      sankey = d3.sankey().size([width - 200, height - 100]).nodeWidth(15).nodePadding(10).nodes(taxonomySankey.nodes).links(taxonomySankey.links).layout(32, width - 200);
      path = sankey.link();
      link = svg.append("g").selectAll(".link").data(taxonomySankey.links).enter().append("path").attr("class", "link").attr("d", path).style('stroke', function(d, i) {
        return color(d.target.name);
      }).style("stroke-width", function(d) {
        return Math.max(1, d.dy);
      }).sort(function(a, b) {
        return b.dy - a.dy;
      }).on("mouseover", function(d, i) {
        infoPanel.html(d.source.name + " → " + d.target.name + ': ' + d.absValue);
        return infoPanel.style({
          "visibility": "visible",
          top: (d3.event.pageY - 10) + "px",
          left: (d3.event.pageX + 10) + "px"
        });
      }).on("mouseout", function(d, i) {
        return infoPanel.style({
          "visibility": "hidden"
        });
      });
      node = svg.append("g").selectAll(".node").data(taxonomySankey.nodes).enter().append("g").attr("class", "node").attr("transform", function(d) {
        return "translate(" + d.x + "," + d.y + ")";
      });
      node.append("rect").attr("height", function(d) {
        if (d.dy < 1) {
          return 1;
        } else {
          return d.dy;
        }
      }).attr("width", sankey.nodeWidth()).style("fill", function(d, i) {
        return color(d.name);
      }).on("mouseover", function(d, i) {
        var temp, _m, _ref4;
        temp = 0;
        for (i = _m = 0, _ref4 = d.targetLinks.length - 1; 0 <= _ref4 ? _m <= _ref4 : _m >= _ref4; i = 0 <= _ref4 ? ++_m : --_m) {
          temp += d.targetLinks[i].absValue;
        }
        infoPanel.html(d.name + ': ' + temp);
        return infoPanel.style({
          "visibility": "visible",
          top: (d3.event.pageY - 10) + "px",
          left: (d3.event.pageX + 10) + "px"
        });
      }).on("mouseout", function(d, i) {
        return infoPanel.style({
          "visibility": "hidden"
        });
      });
      return node.append("text").attr("x", -6).attr("y", function(d) {
        return d.dy / 2;
      }).attr("dy", ".35em").attr("text-anchor", "end").attr("transform", null).text(function(d) {
        return d.name;
      }).filter(function(d) {
        return d.x < width / 2;
      }).attr("x", 6 + sankey.nodeWidth()).attr("text-anchor", "start");
    };

    taxonomyViz.prototype.drawTaxonomyDonuts = function(cur_attribute) {
      var arr_id, count, donutArr, groupable_array, i, j, selected_new_data_matrix_onLayer, _i, _j, _k, _l, _m, _n, _o, _p, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _results;
      this.fadeInOutCtrl();
      groupable_array = [];
      for (i = _i = 0, _ref = this.selected_samples.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        if (groupable_array.indexOf(this.biom.columns[this.selected_samples[i]].metadata[cur_attribute]) === -1) {
          groupable_array.push(this.biom.columns[this.selected_samples[i]].metadata[cur_attribute]);
        }
      }
      count = new Array(groupable_array.length);
      for (i = _j = 0, _ref1 = groupable_array.length - 1; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; i = 0 <= _ref1 ? ++_j : --_j) {
        count[i] = [];
      }
      selected_new_data_matrix_onLayer = new Array(new_data_matrix_onLayer.length);
      for (i = _k = 0, _ref2 = new_data_matrix_onLayer.length - 1; 0 <= _ref2 ? _k <= _ref2 : _k >= _ref2; i = 0 <= _ref2 ? ++_k : --_k) {
        selected_new_data_matrix_onLayer[i] = new Array(groupable_array.length);
        for (j = _l = 0, _ref3 = groupable_array.length - 1; 0 <= _ref3 ? _l <= _ref3 : _l >= _ref3; j = 0 <= _ref3 ? ++_l : --_l) {
          selected_new_data_matrix_onLayer[i][j] = 0;
        }
        for (j = _m = 0, _ref4 = this.selected_samples.length - 1; 0 <= _ref4 ? _m <= _ref4 : _m >= _ref4; j = 0 <= _ref4 ? ++_m : --_m) {
          arr_id = groupable_array.indexOf(this.biom.columns[this.selected_samples[j]].metadata[cur_attribute]);
          selected_new_data_matrix_onLayer[i][arr_id] += new_data_matrix_onLayer[i][this.selected_samples[j]];
        }
      }
      for (i = _n = 0, _ref5 = this.selected_samples.length - 1; 0 <= _ref5 ? _n <= _ref5 : _n >= _ref5; i = 0 <= _ref5 ? ++_n : --_n) {
        count[groupable_array.indexOf(this.biom.columns[this.selected_samples[i]].metadata[cur_attribute])].push(this.selected_samples[i]);
      }
      d3.select('#taxonomy_container').attr("width", 1200).attr("height", 250 * groupable_array.length + 200);
      _results = [];
      for (i = _o = 0, _ref6 = groupable_array.length - 1; 0 <= _ref6 ? _o <= _ref6 : _o >= _ref6; i = 0 <= _ref6 ? ++_o : --_o) {
        donutArr = [];
        for (j = _p = 0, _ref7 = selected_new_data_matrix_onLayer.length - 1; 0 <= _ref7 ? _p <= _ref7 : _p >= _ref7; j = 0 <= _ref7 ? ++_p : --_p) {
          donutArr.push(selected_new_data_matrix_onLayer[j][i]);
        }
        _results.push(this.drawBasicDonut(i, groupable_array[i], donutArr, count[i]));
      }
      return _results;
    };

    taxonomyViz.prototype.drawBasicDonut = function(donutID, donutName, donutData, donutContainedSamp) {
      var arc, g, infoPanel, pie, radius, svg, that, yScale;
      radius = 125;
      yScale = d3.scale.pow().exponent(.4).domain([0, d3.max(donutData)]).range([0, 100]);
      arc = d3.svg.arc().outerRadius(radius).innerRadius(50);
      pie = d3.layout.pie().sort(null).value(function(d) {
        return yScale(d);
      });
      d3.select('#taxonomy_container').append('div').attr("id", "donut_" + donutID).attr("class", "donutDiv");
      svg = d3.select('#donut_' + donutID).append('svg').attr("width", 300).attr("height", 250).style("float", "left").append("g").attr("transform", "translate(" + 125 + "," + 125 + ")");
      svg.append('text').attr('dy', '.35em').attr('y', '-7').style('text-anchor', 'middle').attr("font-size", "12px").text(donutName);
      svg.append('text').attr('dy', '.35em').style('text-anchor', 'middle').attr("font-size", "14px").attr("font-weight", "bold").attr('y', '7').text(d3.sum(donutData));
      that = this;
      g = svg.selectAll(".arc").data(pie(donutData)).enter().append("g").attr('class', 'arc_' + donutID);
      g.append("path").attr('d', arc).style('fill', function(d, i) {
        return fillCol[i % 20];
      }).on('mouseover', function(d, i) {
        var index;
        index = i;
        return d3.selectAll('g.arc_' + donutID).style('opacity', function(d, i) {
          if (i !== index) {
            return 0.5;
          }
        });
      }).on('mouseout', function(d, i) {
        return d3.selectAll('g.arc_' + donutID).style('opacity', 1);
      }).on('click', function(d, i) {
        return that.drawBasicRect(false, donutContainedSamp, donutID, i);
      });
      infoPanel = d3.select('#donut_' + donutID).append("div").attr("class", "panelCombSample").html('<span class="containedTaxonomy" id="containedTaxonomy_' + donutID + '"></span><div id="selectedColumn_' + donutID + '"></div>');
      return this.drawBasicRect(true, donutContainedSamp, donutID, null);
    };

    taxonomyViz.prototype.drawBasicRect = function(totalFlag, containedSamp, donutID, selectedTaxnomy) {
      var eachBarWidth, i, j, rectArr, rectContainedSamp, thisTaxonomyName, yScale, _i, _j, _ref, _ref1;
      rectArr = new Array(containedSamp.length);
      for (i = _i = 0, _ref = containedSamp.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        rectArr[i] = 0;
        if (totalFlag) {
          for (j = _j = 0, _ref1 = new_data_matrix_onLayer.length - 1; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; j = 0 <= _ref1 ? ++_j : --_j) {
            rectArr[i] += new_data_matrix_onLayer[j][containedSamp[i]];
          }
        } else {
          rectArr[i] += new_data_matrix_onLayer[selectedTaxnomy][containedSamp[i]];
        }
      }
      d3.select('#containedTaxonomy_' + donutID).html("");
      if (totalFlag) {
        d3.select('#containedTaxonomy_' + donutID).html(unique_taxonomy_comb_onLayer.length + ' Taxonomy in Total');
      } else {
        thisTaxonomyName = unique_taxonomy_comb_onLayer[selectedTaxnomy][0] + ',' + unique_taxonomy_comb_onLayer[selectedTaxnomy][1] + ',' + unique_taxonomy_comb_onLayer[selectedTaxnomy][2] + ',' + unique_taxonomy_comb_onLayer[selectedTaxnomy][3] + ',' + unique_taxonomy_comb_onLayer[selectedTaxnomy][4] + ',' + unique_taxonomy_comb_onLayer[selectedTaxnomy][5] + ',' + unique_taxonomy_comb_onLayer[selectedTaxnomy][6];
        d3.select('#containedTaxonomy_' + donutID).html('Taxonomy:  ' + thisTaxonomyName);
      }
      yScale = d3.scale.pow().exponent(.5).domain([0, d3.max(rectArr)]).range([2, 170]);
      eachBarWidth = 860 / containedSamp.length;
      if (eachBarWidth < 10) {
        return d3.select('#selectedColumn_' + donutID).html("Too many samples!" + containedSamp);
      } else {
        d3.select('#selectedColumn_' + donutID).select('svg').remove();
        rectContainedSamp = d3.select('#selectedColumn_' + donutID).append('svg');
        rectContainedSamp.selectAll('rect').data(rectArr).enter().append('rect').attr('height', function(d) {
          return yScale(d);
        }).attr('width', eachBarWidth - 3).attr("x", function(d, i) {
          return eachBarWidth * i + 10;
        }).attr("y", function(d, i) {
          return 185 - yScale(d);
        }).style("fill", function(d, i) {
          if (totalFlag) {
            return '#efc14f';
          } else {
            return fillCol[selectedTaxnomy % 20];
          }
        });
        return rectContainedSamp.selectAll('text').data(containedSamp).enter().append('text').text(function(d, i) {
          return d;
        }).attr('x', function(d, i) {
          return eachBarWidth * (i + 0.5) + 10;
        }).attr('y', 200).attr('width', eachBarWidth).attr('text-anchor', 'middle').attr("font-size", "9px").attr('fill', '#444');
      }
    };

    taxonomyViz.prototype.drawTaxonomyByAttributes = function(cur_attribute) {
      var arr_id, attributes_array, count, countEmpty, i, j, selected_new_data_matrix_onLayer, _i, _j, _k, _l, _m, _n, _o, _p, _q, _r, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8, _ref9;
      $('#attributes_dropdown').fadeIn(800);
      selected_new_data_matrix_onLayer = new Array(new_data_matrix_onLayer.length);
      attributes_array = [];
      countEmpty = [];
      for (i = _i = 0, _ref = this.selected_samples.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        if (attributes_array.indexOf(parseFloat(this.biom.columns[this.selected_samples[i]].metadata[cur_attribute].split(" ")[0])) === -1 && this.biom.columns[this.selected_samples[i]].metadata[cur_attribute] !== 'no_data') {
          attributes_array.push(parseFloat(this.biom.columns[this.selected_samples[i]].metadata[cur_attribute].split(" ")[0]));
        }
      }
      attributes_array.sort(this.numberSort);
      count = new Array(attributes_array.length);
      for (i = _j = 0, _ref1 = attributes_array.length - 1; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; i = 0 <= _ref1 ? ++_j : --_j) {
        count[i] = [];
      }
      for (i = _k = 0, _ref2 = new_data_matrix_onLayer.length - 1; 0 <= _ref2 ? _k <= _ref2 : _k >= _ref2; i = 0 <= _ref2 ? ++_k : --_k) {
        selected_new_data_matrix_onLayer[i] = new Array(attributes_array.length);
        for (j = _l = 0, _ref3 = attributes_array.length - 1; 0 <= _ref3 ? _l <= _ref3 : _l >= _ref3; j = 0 <= _ref3 ? ++_l : --_l) {
          selected_new_data_matrix_onLayer[i][j] = 0.0;
        }
        for (j = _m = 0, _ref4 = this.selected_samples.length - 1; 0 <= _ref4 ? _m <= _ref4 : _m >= _ref4; j = 0 <= _ref4 ? ++_m : --_m) {
          arr_id = attributes_array.indexOf(parseFloat(this.biom.columns[this.selected_samples[j]].metadata[cur_attribute].split(" ")[0]));
          selected_new_data_matrix_onLayer[i][arr_id] += new_data_matrix_onLayer[i][this.selected_samples[j]];
        }
      }
      for (i = _n = 0, _ref5 = this.selected_samples.length - 1; 0 <= _ref5 ? _n <= _ref5 : _n >= _ref5; i = 0 <= _ref5 ? ++_n : --_n) {
        if (!isNaN(parseFloat(this.biom.columns[this.selected_samples[i]].metadata[cur_attribute].split(" ")[0]))) {
          count[attributes_array.indexOf(parseFloat(this.biom.columns[this.selected_samples[i]].metadata[cur_attribute].split(" ")[0]))].push(this.selected_samples[i]);
        } else {
          countEmpty.push(this.selected_samples[i]);
        }
      }
      vizdata = new Array(selected_new_data_matrix_onLayer.length);
      sumEachCol = new Array(attributes_array.length);
      for (i = _o = 0, _ref6 = selected_new_data_matrix_onLayer.length - 1; 0 <= _ref6 ? _o <= _ref6 : _o >= _ref6; i = 0 <= _ref6 ? ++_o : --_o) {
        vizdata[i] = new Array(attributes_array.length);
        for (j = _p = 0, _ref7 = attributes_array.length - 1; 0 <= _ref7 ? _p <= _ref7 : _p >= _ref7; j = 0 <= _ref7 ? ++_p : --_p) {
          vizdata[i][j] = new Object();
          vizdata[i][j].x = j;
          vizdata[i][j].y = selected_new_data_matrix_onLayer[i][j];
          vizdata[i][j].name = unique_taxonomy_comb_onLayer[i][0] + ',' + unique_taxonomy_comb_onLayer[i][1] + ',' + unique_taxonomy_comb_onLayer[i][2] + ',' + unique_taxonomy_comb_onLayer[i][3] + ',' + unique_taxonomy_comb_onLayer[i][4] + ',' + unique_taxonomy_comb_onLayer[i][5] + ',' + unique_taxonomy_comb_onLayer[i][6];
        }
      }
      for (i = _q = 0, _ref8 = attributes_array.length - 1; 0 <= _ref8 ? _q <= _ref8 : _q >= _ref8; i = 0 <= _ref8 ? ++_q : --_q) {
        sumEachCol[i] = 0;
        for (j = _r = 0, _ref9 = selected_new_data_matrix_onLayer.length - 1; 0 <= _ref9 ? _r <= _ref9 : _r >= _ref9; j = 0 <= _ref9 ? ++_r : --_r) {
          vizdata[j][i].y0 = sumEachCol[i];
          sumEachCol[i] += selected_new_data_matrix_onLayer[j][i];
        }
      }
      this.drawBasicColumns(attributes_array);
      return $('#countResult').html(countEmpty);
    };

    taxonomyViz.prototype.drawBasicColumns = function(attributes_array) {
      var h, label, margin, max_single, rect, rule, svg, taxonomy, tooltip, w, x, y, zoom;
      this.fadeInOutCtrl();
      w = sumEachCol.length < 80 ? 1500 : sumEachCol.length * 18 + 200;
      h = 800;
      max_single = d3.max(sumEachCol);
      margin = {
        top: 20,
        right: 20,
        bottom: 20,
        left: 100
      };
      x = d3.scale.ordinal().domain(vizdata[0].map(function(d) {
        return d.x;
      })).rangeRoundBands([0, w - margin.right - margin.left - 300]);
      y = d3.scale.linear().domain([0, max_single]).range([0, h - margin.top - margin.bottom]);
      svg = d3.select("#taxonomy_container").append("svg").attr("width", w).attr("height", h + 100).append("g").attr("transform", "translate(" + margin.left + "," + margin.top + ")");
      tooltip = d3.select("#taxonomy_container").append("div").attr("class", "tooltipOverSmallThumb").style("visibility", "hidden");
      zoom = d3.behavior.zoom().on("zoom", function() {
        return svg.attr("transform", "translate(" + d3.event.translate[0] + ", 0)scale(" + g_scale + ")");
      });
      taxonomy = svg.selectAll('g.taxonomy').data(vizdata).enter().append('g').attr('class', 'taxonomy').style('fill', function(d, i) {
        return fillCol[i % 20];
      }).on('mouseover', function(d, i) {
        return d3.select(this).style({
          'fill': d3.rgb(fillCol[i % 20]).darker()
        });
      }).on('mouseout', function(d, i) {
        return d3.select(this).style({
          'fill': fillCol[i % 20]
        });
      });
      rect = taxonomy.selectAll('rect').data(Object).enter().append('rect').attr('class', 'pane').attr('x', function(d, i) {
        if (sumEachCol.length < 80) {
          return x(d.x) + i * 3;
        } else {
          return 15 * i + i * 3;
        }
      }).attr('y', function(d, i) {
        if (!percentage) {
          return h - y(d.y) - y(d.y0);
        } else {
          return h - (y(d.y) + y(d.y0)) / sumEachCol[i] * max_single;
        }
      }).attr('height', function(d, i) {
        if (!percentage) {
          return y(d.y);
        } else {
          return y(d.y) / sumEachCol[i] * max_single;
        }
      }).attr('width', function(d, i) {
        if (sumEachCol.length < 80) {
          return x.rangeBand();
        } else {
          return 15;
        }
      }).on('mouseover', function(d, i) {
        tooltip.html("Taxonomy: " + d.name + "<br/> Total: " + d.y);
        return tooltip.style({
          "visibility": "visible",
          top: (d3.event.pageY - 10) + "px",
          left: (d3.event.pageX + 10) + "px"
        });
      }).on('mouseout', function(d, i) {
        return tooltip.style("visibility", "hidden");
      });
      x.domain();
      label = svg.selectAll('text').data(attributes_array).enter().append('text').text(function(d, i) {
        return d;
      }).attr('x', function(d, i) {
        if (sumEachCol.length < 80) {
          return x.rangeBand() * i + x.rangeBand() / 2 + i * 3;
        } else {
          return 15 * i + 7.5 + i * 3;
        }
      }).attr('y', h + 15).attr('text-anchor', 'middle').attr("font-size", "10px").attr('fill', '#444');
      rule = svg.selectAll('g.rule').data(y.ticks(10)).enter().append('g').attr('class', 'rule').attr('transform', function(d) {
        return "translate(0," + (h - y(d)) + ")";
      });
      rule.append('line').attr('x2', function(d, i) {
        if (sumEachCol.length < 80) {
          return w - margin.left - margin.right - 200;
        } else {
          return w - 200;
        }
      }).style("stroke", function(d) {
        if (d) {
          return "#eee";
        } else {
          return "#444";
        }
      }).style("stroke-opacity", function(d) {
        if (d) {
          return 0.7;
        } else {
          return null;
        }
      });
      return rule.append('text').attr('x', -25).attr("font-size", "9px").attr('text-anchor', 'end').attr('fill', '#444').text(function(d, i) {
        if (!percentage) {
          return format(d);
        } else {
          return Math.round(i / (y.ticks(10).length - 1) * 100) + '%';
        }
      });
    };

    taxonomyViz.prototype.numberSort = function(a, b) {
      return a - b;
    };

    taxonomyViz.prototype.fadeInOutCtrl = function() {
      $("#taxonomy_container").html("");
      return $('#layer_' + LayerID).delay(500).queue(function(n) {
        $('#taxonomy_container').fadeIn(500);
        $('.dg').fadeIn(500);
        if (VizID === 0) {
          $('#outline').fadeIn(500);
          $('#tags').fadeIn(500);
        }
        if (VizID === 2) {
          $('#layer_6').hide();
          $('#layer_7').hide();
        }
        $('#layer_' + LayerID).removeClass("loading_notes");
        $('#LayerFolder ul li .layer_change').removeClass('current_layer');
        $('#layer_' + LayerID).addClass('current_layer');
        return n();
      });
    };

    return taxonomyViz;

  })();

  window.taxonomyViz = taxonomyViz;

}).call(this);
