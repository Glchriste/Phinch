// Generated by CoffeeScript 1.6.3
(function() {
  var taxonomyViz,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  taxonomyViz = (function() {
    var LayerID, VizID, biom, bubbleView, columns_sample_name_array, deleteOTUArr, deleteSampleArr, fillCol, format, globalColoring, groupable, layerNameArr, map_array, new_data_matrix, new_data_matrix_onLayer, percentage, selected_attributes_array, selected_attributes_units_array, selected_phinchID_array, selected_samples, standardizedValue, sumEachCol, sumEachTax, unique_taxonomy_comb, unique_taxonomy_comb_count, unique_taxonomy_comb_onLayer, vizdata;

    biom = null;

    percentage = false;

    bubbleView = true;

    LayerID = 2;

    VizID = null;

    vizdata = null;

    sumEachCol = null;

    sumEachTax = null;

    new_data_matrix_onLayer = null;

    unique_taxonomy_comb_onLayer = null;

    format = d3.format(',d');

    fillCol = ['#3182bd', '#6baed6', '#9ecae1', '#c6dbef', '#e6550d', '#fd8d3c', '#fdae6b', '#fdd0a2', '#31a354', '#74c476', '#a1d99b', '#c7e9c0', '#756bb1', '#9e9ac8', '#bcbddc', '#dadaeb', '#636363', '#969696', '#bdbdbd', '#d9d9d9'];

    layerNameArr = ['kingdom', 'phylum', 'class', 'order', 'family', 'genus', 'species'];

    standardizedValue = 0;

    deleteOTUArr = [];

    deleteSampleArr = [];

    new_data_matrix = [];

    unique_taxonomy_comb = [];

    columns_sample_name_array = [];

    map_array = [];

    unique_taxonomy_comb_count = [];

    selected_samples = [];

    groupable = [];

    selected_attributes_array = [];

    selected_attributes_units_array = [];

    selected_phinchID_array = [];

    globalColoring = d3.scale.category20();

    function taxonomyViz(_VizID) {
      this.clickSmallSankeyNode = __bind(this.clickSmallSankeyNode, this);
      this.clickLargeSnakeyNode = __bind(this.clickLargeSnakeyNode, this);
      var _this = this;
      VizID = _VizID;
      db.open({
        server: "BiomSample",
        version: 1,
        schema: {
          "biomSample": {
            key: {
              keyPath: 'id',
              autoIncrement: true
            }
          }
        }
      }).done(function(s) {
        return s.biomSample.query().all().execute().done(function(results) {
          var selected_groupable_array;
          selected_samples = results[results.length - 1].selected_sample;
          groupable = results[results.length - 1].groupable;
          selected_groupable_array = results[results.length - 1].selected_groupable_array;
          selected_attributes_array = results[results.length - 1].selected_attributes_array;
          selected_attributes_units_array = results[results.length - 1].selected_attributes_units_array;
          selected_phinchID_array = results[results.length - 1].selected_phinchID_array;
          return db.open({
            server: "BiomData",
            version: 1,
            schema: {
              "biom": {
                key: {
                  keyPath: 'id',
                  autoIncrement: true
                }
              }
            }
          }).done(function(s) {
            return s.biom.query().all().execute().done(function(results) {
              var currentData;
              currentData = results[results.length - 1];
              biom = JSON.parse(currentData.data);
              $("#file_details").html("");
              $("#file_details").append("ANALYZING &nbsp;<span>" + currentData.name.substring(0, 40) + "</span> &nbsp;&nbsp;&nbsp;" + (parseFloat(currentData.size.valueOf() / 1000000)).toFixed(1) + " MB <br/><br />Observation &nbsp;<em>" + format(biom.shape[0]) + "</em> &nbsp;&nbsp;&nbsp; Selected Samples &nbsp;<em>" + format(selected_samples.length) + "</em>");
              $('.circle').click(function(evt) {
                var that;
                that = _this;
                $('.circle').removeClass('selected_layer');
                $('.circle').css('background-image', 'url("css/images/circle.png")');
                LayerID = parseInt(evt.currentTarget.id.replace("layer_", ""));
                $('#layer_' + LayerID).css('background-image', 'url("css/images/' + layerNameArr[LayerID - 1] + '.png")');
                return $('.progressLine').animate({
                  width: (120 + (LayerID - 2) * 111) + 'px'
                }, {
                  duration: 1000,
                  specialEasing: {
                    width: "easeInOutQuad"
                  },
                  complete: function() {
                    var i, _i, _ref;
                    if (LayerID > 1) {
                      for (i = _i = 1, _ref = LayerID - 1; 1 <= _ref ? _i <= _ref : _i >= _ref; i = 1 <= _ref ? ++_i : --_i) {
                        $('#layer_' + i).addClass('selected_layer');
                      }
                    }
                    if ($('#valueBtn').hasClass('clicked')) {
                      percentage = false;
                    } else {
                      percentage = true;
                    }
                    return that.generateVizData();
                  }
                });
              });
              $('#valueBtn').click(function(evt) {
                if (percentage) {
                  percentage = false;
                  LayerID = parseInt($('.selected_layer').length) + 1;
                  $('#valueBtn').addClass('clicked');
                  $('#percentBtn').removeClass('clicked');
                  return _this.generateVizData();
                }
              });
              $('#percentBtn').click(function(evt) {
                if (!percentage) {
                  percentage = true;
                  LayerID = parseInt($('.selected_layer').length) + 1;
                  $('#valueBtn').removeClass('clicked');
                  $('#percentBtn').addClass('clicked');
                  return _this.generateVizData();
                }
              });
              $('#bubbleBtn').click(function(evt) {
                if (!bubbleView) {
                  bubbleView = true;
                  LayerID = parseInt($('.selected_layer').length) + 1;
                  $('#bubbleBtn').addClass('clicked');
                  $('#listBtn').removeClass('clicked');
                  return _this.generateVizData();
                }
              });
              $('#listBtn').click(function(evt) {
                if (bubbleView) {
                  bubbleView = false;
                  LayerID = parseInt($('.selected_layer').length) + 1;
                  $('#bubbleBtn').removeClass('clicked');
                  $('#listBtn').addClass('clicked');
                  return _this.generateVizData();
                }
              });
              if (VizID === 5) {
                LayerID = 7;
              }
              $('#legend_header').click(function() {
                if ($('#legend_header').html() === 'TOP SEQS') {
                  $('#outline').hide();
                  return $('#legend_header').animate({
                    width: ($('#legend_container').width() - 1) + 'px'
                  }, {
                    duration: 500,
                    specialEasing: {
                      width: "easeInOutQuad"
                    },
                    complete: function() {
                      $('#legend_container').animate({
                        opacity: 1
                      }, {
                        duration: 500
                      });
                      $('#legend_header').html('TOP SEQUENCES');
                      return $('#legend_header').css('background', 'url("css/images/collapse.png") no-repeat');
                    }
                  });
                } else {
                  return $('#legend_container').animate({
                    opacity: '0'
                  }, {
                    duration: 500,
                    specialEasing: {
                      opacity: "easeInOutQuad"
                    },
                    complete: function() {
                      $('#legend_header').animate({
                        width: '146px'
                      }, {
                        duration: 500
                      });
                      $('#legend_header').html('TOP SEQS');
                      $('#legend_header').css('background', 'none');
                      return $('#outline').show();
                    }
                  });
                }
              });
              $('#count_header').click(function() {
                if ($('#count_header').html() === 'SAMPLE DIST') {
                  return $('#count_header').animate({
                    width: '399px'
                  }, {
                    duration: 500,
                    specialEasing: {
                      width: "easeInOutQuad"
                    },
                    complete: function() {
                      $('#count_container').animate({
                        opacity: 1
                      }, {
                        duration: 500
                      });
                      $('#count_header').html('SAMPLE DISTRIRBUTION');
                      return $('#count_header').css('background', 'url("css/images/collapse.png") no-repeat');
                    }
                  });
                } else {
                  return $('#count_container').animate({
                    opacity: '0'
                  }, {
                    duration: 500,
                    specialEasing: {
                      opacity: "easeInOutQuad"
                    },
                    complete: function() {
                      $('#count_header').animate({
                        width: '146px'
                      }, {
                        duration: 500
                      });
                      $('#count_header').html('SAMPLE DIST');
                      return $('#count_header').css('background', 'none');
                    }
                  });
                }
              });
              _this.prepareData();
              return _this.generateVizData();
            });
          });
        });
      });
    }

    taxonomyViz.prototype.prepareData = function() {
      var comb_len, comp_i, flag, i, j, _i, _j, _k, _l, _m, _n, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _results;
      for (i = _i = 0, _ref = biom.rows.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        flag = true;
        comp_i = new Array(7);
        comb_len = unique_taxonomy_comb.length;
        if (biom.rows[i].metadata.taxonomy.indexOf(';') !== -1) {
          comp_i = biom.rows[i].metadata.taxonomy.replace(/\s+/g, '').replace(/;/g, ',').split(',');
        } else {
          comp_i = biom.rows[i].metadata.taxonomy;
        }
        if (comp_i[0].indexOf('k__') === -1) {
          comp_i[0] = 'k__';
        }
        switch (comp_i.length) {
          case 6:
            comp_i = [comp_i[0], comp_i[1], comp_i[2], comp_i[3], comp_i[4], comp_i[5], 's__'];
            break;
          case 5:
            comp_i = [comp_i[0], comp_i[1], comp_i[2], comp_i[3], comp_i[4], 'g__', 's__'];
            break;
          case 4:
            comp_i = [comp_i[0], comp_i[1], comp_i[2], comp_i[3], 'f__', 'g__', 's__'];
            break;
          case 3:
            comp_i = [comp_i[0], comp_i[1], comp_i[2], 'o__', 'f__', 'g__', 's__'];
            break;
          case 2:
            comp_i = [comp_i[0], comp_i[1], 'c__', 'o__', 'f__', 'g__', 's__'];
            break;
          case 1:
            comp_i = [comp_i[0], 'p__', 'c__', 'o__', 'f__', 'g__', 's__'];
            break;
          case 0:
            comp_i = ['k__', 'p__', 'c__', 'o__', 'f__', 'g__', 's__'];
        }
        if (comb_len > 0) {
          for (j = _j = 0, _ref1 = comb_len - 1; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; j = 0 <= _ref1 ? ++_j : --_j) {
            if (comp_i[0] === unique_taxonomy_comb[j][0] && comp_i[1] === unique_taxonomy_comb[j][1] && comp_i[2] === unique_taxonomy_comb[j][2] && comp_i[3] === unique_taxonomy_comb[j][3] && comp_i[4] === unique_taxonomy_comb[j][4] && comp_i[5] === unique_taxonomy_comb[j][5] && comp_i[6] === unique_taxonomy_comb[j][6]) {
              unique_taxonomy_comb_count[j]++;
              map_array[i] = j;
              flag = false;
              break;
            }
          }
        }
        if (flag) {
          map_array[i] = comb_len;
          unique_taxonomy_comb_count[comb_len] = 1;
          unique_taxonomy_comb[comb_len] = comp_i;
        }
      }
      for (i = _k = 0, _ref2 = unique_taxonomy_comb.length - 1; 0 <= _ref2 ? _k <= _ref2 : _k >= _ref2; i = 0 <= _ref2 ? ++_k : --_k) {
        new_data_matrix[i] = [];
        for (j = _l = 0, _ref3 = biom.shape[1] - 1; 0 <= _ref3 ? _l <= _ref3 : _l >= _ref3; j = 0 <= _ref3 ? ++_l : --_l) {
          new_data_matrix[i][j] = 0;
        }
      }
      for (i = _m = 0, _ref4 = biom.data.length - 1; 0 <= _ref4 ? _m <= _ref4 : _m >= _ref4; i = 0 <= _ref4 ? ++_m : --_m) {
        new_data_matrix[map_array[biom.data[i][0]]][biom.data[i][1]] += biom.data[i][2];
      }
      _results = [];
      for (i = _n = 0, _ref5 = biom.shape[1] - 1; 0 <= _ref5 ? _n <= _ref5 : _n >= _ref5; i = 0 <= _ref5 ? ++_n : --_n) {
        _results.push(columns_sample_name_array.push(biom.columns[i].id));
      }
      return _results;
    };

    taxonomyViz.prototype.generateVizData = function() {
      var comp_i, flag, flag_count, i, j, k, viz_map_array, _i, _j, _k, _l, _m, _n, _o, _p, _q, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8,
        _this = this;
      unique_taxonomy_comb_onLayer = [];
      new_data_matrix_onLayer = [];
      viz_map_array = [];
      if (LayerID < 7) {
        for (i = _i = 0, _ref = unique_taxonomy_comb.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
          comp_i = unique_taxonomy_comb[i];
          flag = true;
          if (unique_taxonomy_comb_onLayer.length > 0) {
            for (j = _j = 0, _ref1 = unique_taxonomy_comb_onLayer.length - 1; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; j = 0 <= _ref1 ? ++_j : --_j) {
              flag_count = 0;
              for (k = _k = 0, _ref2 = LayerID - 1; 0 <= _ref2 ? _k <= _ref2 : _k >= _ref2; k = 0 <= _ref2 ? ++_k : --_k) {
                if (comp_i[k] === unique_taxonomy_comb_onLayer[j][k]) {
                  flag_count++;
                }
              }
              if (flag_count === LayerID) {
                viz_map_array[i] = j;
                flag = false;
                break;
              }
            }
          }
          if (flag) {
            viz_map_array[i] = unique_taxonomy_comb_onLayer.length;
            switch (LayerID) {
              case 6:
                comp_i = [comp_i[0], comp_i[1], comp_i[2], comp_i[3], comp_i[4], comp_i[5], 's__'];
                break;
              case 5:
                comp_i = [comp_i[0], comp_i[1], comp_i[2], comp_i[3], comp_i[4], 'g__', 's__'];
                break;
              case 4:
                comp_i = [comp_i[0], comp_i[1], comp_i[2], comp_i[3], 'f__', 'g__', 's__'];
                break;
              case 3:
                comp_i = [comp_i[0], comp_i[1], comp_i[2], 'o__', 'f__', 'g__', 's__'];
                break;
              case 2:
                comp_i = [comp_i[0], comp_i[1], 'c__', 'o__', 'f__', 'g__', 's__'];
            }
            unique_taxonomy_comb_onLayer[unique_taxonomy_comb_onLayer.length] = comp_i;
          }
        }
        for (i = _l = 0, _ref3 = unique_taxonomy_comb_onLayer.length - 1; 0 <= _ref3 ? _l <= _ref3 : _l >= _ref3; i = 0 <= _ref3 ? ++_l : --_l) {
          new_data_matrix_onLayer[i] = [];
          for (j = _m = 0, _ref4 = new_data_matrix[0].length - 1; 0 <= _ref4 ? _m <= _ref4 : _m >= _ref4; j = 0 <= _ref4 ? ++_m : --_m) {
            new_data_matrix_onLayer[i][j] = 0;
          }
        }
        for (i = _n = 0, _ref5 = new_data_matrix.length - 1; 0 <= _ref5 ? _n <= _ref5 : _n >= _ref5; i = 0 <= _ref5 ? ++_n : --_n) {
          for (j = _o = 0, _ref6 = new_data_matrix[0].length - 1; 0 <= _ref6 ? _o <= _ref6 : _o >= _ref6; j = 0 <= _ref6 ? ++_o : --_o) {
            new_data_matrix_onLayer[viz_map_array[i]][j] += new_data_matrix[i][j];
          }
        }
      } else {
        unique_taxonomy_comb_onLayer = unique_taxonomy_comb;
        new_data_matrix_onLayer = new_data_matrix;
      }
      if (VizID === 0) {
        this.rightClick();
        this.filterControl();
        return this.drawD3Bar();
      } else if (VizID === 1) {
        return this.drawTaxonomyBubble();
      } else if (VizID === 2) {
        return this.drawTaxonomySankey();
      } else if (VizID === 3) {
        if (groupable.length > 1) {
          for (i = _p = 0, _ref7 = groupable.length - 1; 0 <= _ref7 ? _p <= _ref7 : _p >= _ref7; i = 0 <= _ref7 ? ++_p : --_p) {
            $('#attributes_dropdown').append('<option>' + groupable[i] + '</option>');
          }
          if ($('#attributes_dropdown option:first').text() !== void 0) {
            this.drawTaxonomyDonuts($('#attributes_dropdown').find(":selected").text());
          } else {
            this.drawTaxonomyDonuts(groupable[0]);
          }
          $('#attributes_dropdown').fadeIn(800);
          return $('#attributes_dropdown').change(function(evt) {
            return _this.drawTaxonomyDonuts(evt.currentTarget.value);
          });
        } else if (groupable.length === 1) {
          $('#attributes_dropdown').hide();
          return this.drawTaxonomyDonuts(groupable[0]);
        } else {
          return alert("Groupable chart not available for this dataset!");
        }
      } else if (VizID === 4) {
        if (selected_attributes_array.length > 0) {
          $('#attributes_dropdown').html("");
          for (i = _q = 0, _ref8 = selected_attributes_array.length - 1; 0 <= _ref8 ? _q <= _ref8 : _q >= _ref8; i = 0 <= _ref8 ? ++_q : --_q) {
            $('#attributes_dropdown').append('<option>' + selected_attributes_array[i] + '</option>');
          }
          if ($('#attributes_dropdown option:first').text() !== void 0) {
            this.drawTaxonomyByAttributes($('#attributes_dropdown').find(":selected").text());
          } else {
            this.drawTaxonomyByAttributes(selected_attributes_array[0]);
          }
          return $('#attributes_dropdown').change(function(evt) {
            return _this.drawTaxonomyByAttributes(evt.currentTarget.value);
          });
        } else {
          return alert("Not supported!");
        }
      } else if (VizID === 5) {
        return this.drawOTUBubble();
      }
    };

    taxonomyViz.prototype.drawD3Bar = function() {
      var i, j, selectedSampleCopy, _i, _j, _k, _l, _m, _ref, _ref1, _ref2, _ref3, _ref4;
      selectedSampleCopy = selected_samples.slice(0);
      vizdata = null;
      vizdata = new Array(new_data_matrix_onLayer.length);
      sumEachTax = null;
      sumEachTax = new Array(new_data_matrix_onLayer.length);
      if (deleteSampleArr.length > 0) {
        for (i = _i = 0, _ref = deleteSampleArr.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
          selectedSampleCopy.splice(selectedSampleCopy.indexOf(deleteSampleArr[i]), 1);
        }
      }
      for (i = _j = 0, _ref1 = new_data_matrix_onLayer.length - 1; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; i = 0 <= _ref1 ? ++_j : --_j) {
        vizdata[i] = new Array(selectedSampleCopy.length);
        sumEachTax[i] = 0;
        for (j = _k = 0, _ref2 = selectedSampleCopy.length - 1; 0 <= _ref2 ? _k <= _ref2 : _k >= _ref2; j = 0 <= _ref2 ? ++_k : --_k) {
          vizdata[i][j] = new Object();
          vizdata[i][j].x = selectedSampleCopy[j];
          vizdata[i][j].i = i;
          if (deleteOTUArr.indexOf(i) === -1) {
            vizdata[i][j].y = new_data_matrix_onLayer[i][selectedSampleCopy[j]];
            sumEachTax[i] += new_data_matrix_onLayer[i][selectedSampleCopy[j]];
          } else {
            vizdata[i][j].y = 0;
          }
          vizdata[i][j].name = unique_taxonomy_comb_onLayer[i][0] + ',' + unique_taxonomy_comb_onLayer[i][1] + ',' + unique_taxonomy_comb_onLayer[i][2] + ',' + unique_taxonomy_comb_onLayer[i][3] + ',' + unique_taxonomy_comb_onLayer[i][4] + ',' + unique_taxonomy_comb_onLayer[i][5] + ',' + unique_taxonomy_comb_onLayer[i][6];
        }
      }
      sumEachCol = null;
      sumEachCol = new Array(selectedSampleCopy.length);
      if (selectedSampleCopy.length > 0) {
        for (i = _l = 0, _ref3 = selectedSampleCopy.length - 1; 0 <= _ref3 ? _l <= _ref3 : _l >= _ref3; i = 0 <= _ref3 ? ++_l : --_l) {
          sumEachCol[i] = 0;
          for (j = _m = 0, _ref4 = new_data_matrix_onLayer.length - 1; 0 <= _ref4 ? _m <= _ref4 : _m >= _ref4; j = 0 <= _ref4 ? ++_m : --_m) {
            vizdata[j][i].y0 = sumEachCol[i];
            if (deleteOTUArr.indexOf(j) === -1) {
              sumEachCol[i] += new_data_matrix_onLayer[j][selectedSampleCopy[i]];
            }
          }
        }
      }
      return this.drawBasicBars();
    };

    taxonomyViz.prototype.drawBasicBars = function() {
      var delePanel, divCont, h, i, infoPanel, label, legendArr, margin, max_single, rect, rule, svg, taxonomy, temp, that, w, x, y, _i, _j, _k, _ref, _ref1, _ref2;
      that = this;
      this.fadeInOutCtrl();
      w = 1200;
      h = sumEachCol.length * 14 + 200;
      max_single = d3.max(sumEachCol);
      margin = {
        top: 100,
        right: 20,
        bottom: 20,
        left: 100
      };
      x = d3.scale.ordinal().domain(vizdata[0].map(function(d) {
        return d.x;
      })).rangeRoundBands([0, h - margin.top - margin.bottom]);
      y = d3.scale.linear().domain([0, max_single]).range([0, w - margin.right - margin.left - 50]);
      format = d3.format(',d');
      svg = d3.select("#taxonomy_container").append("svg").attr("width", w).attr("height", h).append("g").attr("transform", "translate(" + margin.left + "," + margin.top + ")");
      infoPanel = d3.select("#taxonomy_container").append("div").attr("class", "tooltipOverSmallThumb").style("visibility", "hidden");
      delePanel = d3.select("#taxonomy_container").append("div").attr("class", "tooltipOverSmallThumb").style("visibility", "hidden");
      taxonomy = svg.selectAll('g.taxonomy').data(vizdata).enter().append('g').attr('class', 'taxonomy').style('fill', function(d, i) {
        return fillCol[i % 20];
      }).on('mouseover', function(d, i) {
        var index;
        index = i;
        return d3.selectAll('g.taxonomy').style('fill', function(d, i) {
          if (i !== index) {
            return d3.rgb(fillCol[i % 20]).darker();
          } else {
            return fillCol[index % 20];
          }
        }).style('opacity', function(d, i) {
          if (i !== index) {
            return 0.2;
          }
        });
      }).on('mouseout', function(d, i) {
        return d3.selectAll('g.taxonomy').style('fill', function(d, i) {
          return fillCol[i % 20];
        }).style('opacity', 1);
      });
      rect = taxonomy.selectAll('rect').data(Object).enter().append('rect').attr('y', function(d, i) {
        return 14 * i;
      }).attr('x', function(d, i) {
        if (!percentage) {
          return y(d.y0);
        } else {
          return y(d.y0) / sumEachCol[i] * max_single;
        }
      }).attr('width', function(d, i) {
        if (!percentage) {
          return y(d.y);
        } else {
          return y(d.y) / sumEachCol[i] * max_single;
        }
      }).attr('height', 12).on('mouseover', function(d, i) {
        var content;
        content = '';
        content += '<div class="PanelHead">' + columns_sample_name_array[d.x] + '<br/>' + d.name + '</div><div class="PanelRule"></div>';
        content += '<div class="PanelvaluesContainer">In this sample:<br/><span class="PanelTtl">total occurrence<br/><b>' + format(sumEachCol[i]) + '</b></span><span class="PanelValue">this occurrence</br><b>' + format(d.y) + '</b></span><span class="PanelPercent">percent of total</br><b>' + (d.y / sumEachCol[i] * 100).toFixed(1) + '%</b></span>';
        content += 'Compared to all samples:<br/>';
        if (d.y / sumEachTax[d.i] * sumEachCol.length > 2) {
          content += '<div class="PanelSlider" style="width:' + (sumEachTax[d.i] / d.y / sumEachCol.length * 100) + '%;"></div><div class="PanelTrueValue" style="width:100%;"></div>';
        } else {
          content += '<div class="PanelSlider" style="width: 50%;"></div><div class="PanelTrueValue" style="width:' + (d.y / sumEachTax[d.i] * sumEachCol.length * 50) + '%;"></div>';
        }
        content += '<div><span class="PanelTtlAvg">total avg: ' + (100 / sumEachCol.length).toFixed(2) + '%</span>, this sample percent: ' + (d.y / sumEachTax[d.i] * 100).toFixed(2) + '%</div></div>';
        infoPanel.html(content);
        infoPanel.style({
          "visibility": "visible",
          top: (d3.event.pageY - 10) + "px",
          left: (d3.event.pageX + 10) + "px"
        });
        return delePanel.style({
          "visibility": "hidden"
        });
      }).on('mouseout', function(d, i) {
        return infoPanel.style({
          "visibility": "hidden"
        });
      }).on('contextmenu', function(d, i) {
        var content, k, _i, _ref;
        content = '';
        content = '<b><i>Remove sample ' + d.x + '?</i></b>&nbsp;&nbsp;<i class="icon-remove icon-large" id = "iconRemoverPanel"></i><div>';
        if (deleteSampleArr.length > 0) {
          content += '<br/>Deleted samples: <ul id = "deleteSampleArr">';
          for (k = _i = 0, _ref = deleteSampleArr.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; k = 0 <= _ref ? ++_i : --_i) {
            content += '<li><input type="checkbox" id="delete_' + deleteSampleArr[k] + '" checked /><label style="margin-top: 1px;" for="delete_' + deleteSampleArr[k] + '"></label>&nbsp;&nbsp;Sample ' + deleteSampleArr[k] + '</li>';
          }
          content += '</ul></div>';
        }
        delePanel.html(content);
        delePanel.style({
          "visibility": "visible",
          top: (d3.event.pageY - 10) + "px",
          left: (d3.event.pageX + 10) + "px"
        });
        infoPanel.style({
          "visibility": "hidden"
        });
        $('#iconRemoverPanel').click(function() {
          deleteSampleArr.push(d.x);
          return that.drawD3Bar();
        });
        return $('#deleteSampleArr li').each(function(index) {
          return $(this).click(function() {
            var thisSampID;
            thisSampID = parseInt($(this)[0].children[0].id.replace('delete_', ''));
            if ($('#delete_' + thisSampID).is(':checked')) {
              $('#delete_' + thisSampID).prop("checked", false);
              deleteSampleArr.splice(deleteSampleArr.indexOf(thisSampID), 1);
            } else {
              $('#delete_' + thisSampID).prop("checked", true);
              deleteSampleArr.push(thisSampID);
            }
            return that.drawD3Bar();
          });
        });
      });
      label = svg.selectAll('text').data(x.domain()).enter().append('text').text(function(d, i) {
        return String(selected_phinchID_array[i]).substr(-12);
      }).attr('x', -13).attr('y', function(d, i) {
        return 14 * i + 9;
      }).attr('text-anchor', 'end').attr("font-size", "10px").attr('fill', '#444').on('mouseover', function(d, i) {
        infoPanel.html(String(selected_phinchID_array[i]));
        return infoPanel.style({
          "visibility": "visible",
          top: (d3.event.pageY - 10) + "px",
          left: (d3.event.pageX + 10) + "px"
        });
      }).on('mouseout', function(d, i) {
        return infoPanel.style({
          "visibility": "hidden"
        });
      });
      svg.append("text").attr('y', -35).attr("font-size", "11px").text('Sequence Reads').attr('transform', function(d) {
        return "translate(" + y(max_single) / 2 + ", 0)";
      });
      rule = svg.selectAll('g.rule').data(y.ticks(10)).enter().append('g').attr('class', 'rule').attr('transform', function(d) {
        return "translate(" + y(d) + ", 0)";
      });
      rule.append('line').attr('y2', h - 180).style("stroke", function(d) {
        if (d) {
          return "#eee";
        } else {
          return "#444";
        }
      }).style("stroke-opacity", function(d) {
        if (d) {
          return 0.7;
        } else {
          return null;
        }
      });
      rule.append('text').attr('y', -15).attr("font-size", "9px").attr('text-anchor', 'middle').attr('fill', '#444').text(function(d, i) {
        if (!percentage) {
          return format(d);
        } else {
          return Math.round(i / (y.ticks(10).length) * 100) + '%';
        }
      });
      legendArr = [];
      for (i = _i = 0, _ref = sumEachTax.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        temp = new Object();
        temp.originalID = i;
        temp.value = sumEachTax[i];
        temp.name = unique_taxonomy_comb_onLayer[i][0] + ',' + unique_taxonomy_comb_onLayer[i][1] + ',' + unique_taxonomy_comb_onLayer[i][2] + ',' + unique_taxonomy_comb_onLayer[i][3] + ',' + unique_taxonomy_comb_onLayer[i][4] + ',' + unique_taxonomy_comb_onLayer[i][5] + ',' + unique_taxonomy_comb_onLayer[i][6];
        legendArr.push(temp);
      }
      this.createLegend(legendArr);
      divCont = '';
      if (!percentage) {
        for (i = _j = 0, _ref1 = sumEachCol.length - 1; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; i = 0 <= _ref1 ? ++_j : --_j) {
          divCont += '<div class="fake" style="width:' + y(sumEachCol[i]) + 'px;"></div>';
        }
      } else {
        for (i = _k = 0, _ref2 = sumEachCol.length - 1; 0 <= _ref2 ? _k <= _ref2 : _k >= _ref2; i = 0 <= _ref2 ? ++_k : --_k) {
          divCont += '<div class="fake" style="width:' + y(max_single) + 'px;"></div>';
        }
      }
      $('#fake_taxonomy_container').html(divCont);
      $('#viz_container').append('<canvas id="outline" width="150" height="' + (window.innerHeight - 280) + '"></canvas>');
      if (selected_samples.length > 20) {
        return $('#outline').fracs('outline', {
          crop: true,
          styles: [
            {
              selector: 'section',
              fillStyle: 'rgb(230,230,230)'
            }, {
              selector: '#header, #file_details, #autoCompleteList',
              fillStyle: 'rgb(68,68,68)'
            }, {
              selector: '.fake',
              fillStyle: 'rgb(255,193,79)'
            }
          ],
          viewportStyle: {
            fillStyle: 'rgba(29,119,194,0.3)'
          },
          viewportDragStyle: {
            fillStyle: 'rgba(29,119,194,0.4)'
          }
        });
      }
    };

    taxonomyViz.prototype.filterControl = function() {
      var availableTags, i, searchList, that, _i, _ref;
      that = this;
      availableTags = new Array(unique_taxonomy_comb_onLayer.length);
      for (i = _i = 0, _ref = unique_taxonomy_comb_onLayer.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        availableTags[i] = unique_taxonomy_comb_onLayer[i][0] + ',' + unique_taxonomy_comb_onLayer[i][1] + ',' + unique_taxonomy_comb_onLayer[i][2] + ',' + unique_taxonomy_comb_onLayer[i][3] + ',' + unique_taxonomy_comb_onLayer[i][4] + ',' + unique_taxonomy_comb_onLayer[i][5] + ',' + unique_taxonomy_comb_onLayer[i][6];
      }
      $('#tags').keydown(function() {
        if ($('#tags').val().length < 4) {
          return $('#autoCompleteList').fadeOut(200);
        }
      });
      searchList = [];
      $('#autoCompleteList').fadeOut(800);
      return $("#tags").autocomplete({
        source: availableTags,
        minLength: 3,
        response: function(evt, ui) {
          var content, _j, _k, _ref1, _ref2;
          $('#autoCompleteList').html("");
          searchList.length = 0;
          if (ui.content.length > 0) {
            for (i = _j = 0, _ref1 = ui.content.length - 1; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; i = 0 <= _ref1 ? ++_j : --_j) {
              searchList.push(ui.content[i].value);
            }
            content = '<i class="icon-remove icon-large" style="float:right; margin-right: 5px;" id = "iconRemover"></i><ul>';
            for (i = _k = 0, _ref2 = searchList.length - 1; 0 <= _ref2 ? _k <= _ref2 : _k >= _ref2; i = 0 <= _ref2 ? ++_k : --_k) {
              if (deleteOTUArr.indexOf(i) !== -1) {
                content += '<li><span style = "display:block; background-color:#aaa; height: 12px; width: 12px; float: left; margin: 2px 0px;" ></span>&nbsp;&nbsp;';
                content += '<input type="checkbox" id="search_' + i + '"/><label style="margin-top: 1px;" for="search_' + i + '"></label>&nbsp;&nbsp;&nbsp;';
              } else {
                content += '<li><span style = "display:block; background-color:' + fillCol[availableTags.indexOf(searchList[i]) % 20] + '; height: 12px; width: 12px; float: left; margin: 2px 0px;" ></span>&nbsp;&nbsp;';
                content += '<input type="checkbox" id="search_' + i + '" checked /><label style="margin-top: 1px;" for="search_' + i + '"></label>&nbsp;&nbsp;&nbsp;';
              }
              content += searchList[i] + '</li>';
            }
            content += '</ul>';
            $('#autoCompleteList').append(content);
            $('#autoCompleteList ul li').each(function(index) {
              $(this).mouseout(function() {
                return d3.selectAll('g.taxonomy').filter(function(d, i) {
                  return i === index;
                }).style('fill', fillCol[index % 20]);
              });
              $(this).mouseover(function() {
                return d3.selectAll('g.taxonomy').filter(function(d, i) {
                  return i === index;
                }).style('fill', d3.rgb(fillCol[index % 20]).darker());
              });
              return $(this).click(function() {
                if ($('#search_' + index).is(':checked')) {
                  $('#search_' + index).prop("checked", false);
                  $(this).find('span').css('background-color', '#aaa');
                  $(this).css('color', '#aaa');
                  deleteOTUArr.push(index);
                } else {
                  $('#search_' + index).prop("checked", true);
                  $(this).find('span').css('background-color', fillCol[index % 20]);
                  $(this).css('color', '#000');
                  deleteOTUArr.splice(deleteOTUArr.indexOf(index), 1);
                }
                return that.drawD3Bar();
              });
            });
            $('#iconRemover').click(function() {
              return $('#autoCompleteList').fadeOut(200);
            });
            return $('#autoCompleteList').show();
          } else {
            $('#autoCompleteList').html("");
            return $('#autoCompleteList').hide();
          }
        }
      });
    };

    taxonomyViz.prototype.rightClick = function() {
      if (document.addEventListener) {
        return document.addEventListener('contextmenu', function(e) {
          return e.preventDefault();
        }, false);
      } else {
        return document.addEventListener('oncontextmenu', function(e) {
          return window.event.returnValue = false;
        }, false);
      }
    };

    taxonomyViz.prototype.drawTaxonomyBubble = function() {
      var adjust_max, adjust_min, comb_name, comb_name_list, force, i, infoPanel, j, maxRowHeight, max_single, node, nodes, radius_scale, removePanel, tooltip, vis, viz_series, _i, _j, _k, _l, _m, _n, _ref, _ref1, _ref2, _ref3, _ref4,
        _this = this;
      this.fadeInOutCtrl();
      viz_series = new Array(unique_taxonomy_comb_onLayer.length);
      vizdata = new Array(unique_taxonomy_comb_onLayer.length);
      comb_name_list = new Array(unique_taxonomy_comb_onLayer.length);
      max_single = 0;
      for (i = _i = 0, _ref = unique_taxonomy_comb_onLayer.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        vizdata[i] = 0;
        viz_series[i] = new Array(selected_samples.length);
        comb_name_list[i] = [];
      }
      for (i = _j = 0, _ref1 = new_data_matrix_onLayer.length - 1; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; i = 0 <= _ref1 ? ++_j : --_j) {
        for (j = _k = 0, _ref2 = selected_samples.length - 1; 0 <= _ref2 ? _k <= _ref2 : _k >= _ref2; j = 0 <= _ref2 ? ++_k : --_k) {
          vizdata[i] += new_data_matrix_onLayer[i][selected_samples[j]];
          viz_series[i][j] = new_data_matrix_onLayer[i][selected_samples[j]];
          if (viz_series[i][j] > max_single) {
            max_single = viz_series[i][j];
          }
        }
        comb_name = "";
        for (j = _l = 0; _l <= 5; j = ++_l) {
          comb_name += unique_taxonomy_comb_onLayer[i][j] + ',';
        }
        comb_name += unique_taxonomy_comb_onLayer[i][6];
        comb_name_list[i] = comb_name;
      }
      vis = d3.select("#taxonomy_container").append("svg").attr("width", 1000).attr("height", 1000).attr("style", "margin: 20px 0 0 50px;");
      tooltip = d3.select("#taxonomy_container").append("div").attr("id", "pinch_tooltip").style("visibility", "hidden");
      infoPanel = d3.select("#taxonomy_container").append("div").attr("id", "pinch_panel").style("visibility", "hidden");
      removePanel = d3.select("#taxonomy_container").append('div').attr('id', "removePanel").style("visibility", "hidden");
      removePanel.append('i').attr('class', 'icon-remove icon-large');
      $('#bubbleSlider').slider({
        range: true,
        min: 1,
        max: d3.max(vizdata),
        values: [1, d3.max(vizdata)],
        slide: function(event, ui) {
          console.log(ui.values[0]);
          return console.log(ui.values[1]);
        }
      });
      nodes = [];
      adjust_min = 1;
      adjust_max = d3.max(vizdata) + 1;
      radius_scale = d3.scale.pow().exponent(0.25).domain([adjust_min, adjust_max]).range([2, 50]);
      for (i = _m = 0, _ref3 = new_data_matrix_onLayer.length - 1; 0 <= _ref3 ? _m <= _ref3 : _m >= _ref3; i = 0 <= _ref3 ? ++_m : --_m) {
        if (vizdata[i] > adjust_min && vizdata[i] < adjust_max) {
          node = {
            id: i,
            radius: radius_scale(vizdata[i]),
            value: vizdata[i],
            name: comb_name_list[i],
            group: "medium",
            x: Math.random() * 800,
            y: Math.random() * 600
          };
          nodes.push(node);
        }
      }
      if (bubbleView) {
        force = d3.layout.force().gravity(0.1).charge(function(d) {
          return -Math.pow(d.radius, 2.0) / 8;
        }).nodes(nodes).on("tick", function(e) {
          return node.attr("cx", function(d) {
            return d.x;
          }).attr("cy", function(d) {
            return d.y;
          });
        }).size([200 + LayerID * 120, 160 + LayerID * 120]).start();
      } else {
        if (nodes.length > 0) {
          nodes.sort(function(a, b) {
            return b.value - a.value;
          });
          nodes[0].x = 60;
          nodes[0].y = 60;
          maxRowHeight = 50;
          for (i = _n = 1, _ref4 = nodes.length - 1; 1 <= _ref4 ? _n <= _ref4 : _n >= _ref4; i = 1 <= _ref4 ? ++_n : --_n) {
            nodes[i].x = nodes[i - 1].x + nodes[i - 1].radius + nodes[i].radius + 20;
            nodes[i].y = nodes[i - 1].y;
            if (nodes[i].x > 850) {
              nodes[i].x = 10 + nodes[i].radius;
              nodes[i].y += 40 + nodes[i].radius + maxRowHeight;
              maxRowHeight = nodes[i].radius;
            }
          }
          vis.attr("height", nodes[nodes.length - 1].y + 50);
        }
      }
      node = vis.selectAll(".node").data(nodes).enter().append("circle").attr("class", "node").attr("cx", function(d) {
        return d.x;
      }).attr("cy", function(d) {
        return d.y;
      }).attr("r", function(d) {
        return d.radius;
      }).style("fill", function(d, i) {
        return fillCol[d.id % 20];
      }).style({
        opacity: '1',
        stroke: 'none'
      }).on('mouseover', function(d, i) {
        d3.select(this).style({
          opacity: '1',
          stroke: '#000',
          'stroke-width': '3'
        });
        tooltip.html("Taxonomy: " + d.name + "<br/><br/> Total Reads: " + d.value);
        return tooltip.style({
          "visibility": "visible",
          top: (d3.event.pageY - 10) + "px",
          left: (d3.event.pageX + 10) + "px"
        });
      }).on('mouseout', function(d) {
        d3.select(this).style({
          opacity: '1',
          stroke: 'none'
        });
        return tooltip.style("visibility", "hidden");
      }).on('click', function(d, i) {
        var barrect, circleUnderMouse, curColor, txtrect, valrect, y;
        tooltip.style("display", "none");
        if (bubbleView) {
          force.stop();
        }
        circleUnderMouse = this;
        d3.select(this).transition().attr('cx', '60').attr('cy', '60').duration(750).ease("quad-in-out");
        d3.selectAll(".node").filter(function(d, i) {
          return this !== circleUnderMouse;
        }).transition().attr('r', '0').duration(750).delay(750).ease("quad-in-out");
        y = d3.scale.linear().domain([0, d3.max(viz_series[d.id])]).range([1, 115]);
        infoPanel.style("visibility", "visible");
        removePanel.style("visibility", 'visible');
        curColor = d3.select(this).style("fill");
        infoPanel.html('<div class="taxonomyHeader">' + d.name.substring(0, 70) + '&nbsp;&nbsp;' + format(d3.sum(viz_series[d.id])) + ' Reads &nbsp;<span>SAMPLE DISTRIRBUTION</span></div><svg width="813px" style="float: right; padding: 0 20px; border: 1px solid #c8c8c8; border-top: none;" height="' + Math.ceil(viz_series[d.id].length / 5 + 1) * 25 + '"></svg>');
        barrect = infoPanel.select('svg').selectAll('rect').data(viz_series[d.id]);
        valrect = infoPanel.select('svg').selectAll('text').data(viz_series[d.id]);
        txtrect = infoPanel.select('svg').selectAll('text').data(selected_samples);
        txtrect.enter().append('text').text(function(d, i) {
          return String(selected_phinchID_array[i]).substr(-6);
        }).attr("x", function(d, i) {
          return ((i % 5) * 160 + 50) + 'px';
        }).attr("y", function(d, i) {
          return 25 * Math.floor(i / 5) + 30 + 'px';
        }).attr("text-anchor", 'end').attr("font-size", "10px").attr("font-weight", 'bold');
        barrect.enter().append('rect').attr('height', '15px').attr('width', '115px').attr("x", function(d, i) {
          return ((i % 5) * 160 + 55) + 'px';
        }).attr("y", function(d, i) {
          return 25 * Math.floor(i / 5) + 20 + 'px';
        }).style("fill", '#f2f2f2');
        barrect.enter().append('rect').attr('height', '15px').attr('width', function(d) {
          return y(d);
        }).attr("x", function(d, i) {
          return ((i % 5) * 160 + 55) + 'px';
        }).attr("y", function(d, i) {
          return 25 * Math.floor(i / 5) + 20 + 'px';
        }).style("fill", curColor);
        return valrect.enter().append('text').text(function(d, i) {
          return format(d);
        }).attr("x", function(d, i) {
          return ((i % 5) * 160 + 165) + 'px';
        }).attr("y", function(d, i) {
          return 25 * Math.floor(i / 5) + 31 + 'px';
        }).attr("text-anchor", 'end').attr("font-size", "10px").attr("fill", "#bbb");
      });
      return d3.select('#removePanel').on('click', function(d) {
        tooltip.style("display", "block");
        infoPanel.style("visibility", "hidden");
        removePanel.style("visibility", 'hidden');
        if (bubbleView) {
          force.resume();
        }
        return d3.selectAll(".node").transition().style({
          opacity: '0.7',
          stroke: 'none'
        }).attr("cx", function(d) {
          return d.x;
        }).attr("cy", function(d) {
          return d.y;
        }).attr('r', function(d) {
          return d.radius;
        }).duration(750).ease("quad");
      });
    };

    taxonomyViz.prototype.drawTaxonomySankey = function() {
      var color, height, i, infoPanel, j, link, linkExist, margin, maxNodeAbsValue, max_single, node, nodesArr, path, sankey, svg, taxonomySankey, tempLink, tempNode, width, yScale, _i, _j, _k, _l, _len, _len1, _m, _n, _ref, _ref1, _ref2, _ref3, _ref4, _ref5,
        _this = this;
      this.fadeInOutCtrl();
      nodesArr = [];
      sumEachTax = new Array(unique_taxonomy_comb_onLayer.length);
      taxonomySankey = new Object();
      taxonomySankey.nodes = [];
      taxonomySankey.links = [];
      if (unique_taxonomy_comb_onLayer.length > 0) {
        for (i = _i = 0, _ref = unique_taxonomy_comb_onLayer.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
          sumEachTax[i] = 0;
          for (j = _j = 0, _ref1 = selected_samples.length - 1; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; j = 0 <= _ref1 ? ++_j : --_j) {
            sumEachTax[i] += new_data_matrix_onLayer[i][selected_samples[j]];
          }
        }
        max_single = d3.max(sumEachTax);
        console.log('max_single: ' + max_single);
        for (i = _k = 0, _ref2 = unique_taxonomy_comb_onLayer.length - 1; 0 <= _ref2 ? _k <= _ref2 : _k >= _ref2; i = 0 <= _ref2 ? ++_k : --_k) {
          for (j = _l = 0, _ref3 = LayerID - 1; 0 <= _ref3 ? _l <= _ref3 : _l >= _ref3; j = 0 <= _ref3 ? ++_l : --_l) {
            if (nodesArr.indexOf(unique_taxonomy_comb_onLayer[i][j]) === -1) {
              nodesArr.push(unique_taxonomy_comb_onLayer[i][j]);
              tempNode = new Object();
              tempNode.name = unique_taxonomy_comb_onLayer[i][j];
              taxonomySankey.nodes.push(tempNode);
            }
            if (j > 0) {
              linkExist = false;
              tempLink = new Object();
              tempLink.source = nodesArr.indexOf(unique_taxonomy_comb_onLayer[i][j - 1]);
              tempLink.target = nodesArr.indexOf(unique_taxonomy_comb_onLayer[i][j]);
              tempLink.absValue = sumEachTax[i];
              _ref4 = taxonomySankey.links;
              for (_m = 0, _len = _ref4.length; _m < _len; _m++) {
                link = _ref4[_m];
                if (link.source === tempLink.source && link.target === tempLink.target) {
                  link.absValue += sumEachTax[i];
                  linkExist = true;
                }
              }
              if (!linkExist) {
                taxonomySankey.links.push(tempLink);
              }
            }
          }
        }
        maxNodeAbsValue = d3.max(taxonomySankey.links, function(d, i) {
          return d.absValue;
        });
        yScale = d3.scale.linear().domain([0, maxNodeAbsValue]).range([0, 10]);
        _ref5 = taxonomySankey.links;
        for (_n = 0, _len1 = _ref5.length; _n < _len1; _n++) {
          link = _ref5[_n];
          link.value = link.absValue;
        }
      }
      width = 1200;
      height = 20 * unique_taxonomy_comb_onLayer.length;
      margin = {
        top: 40,
        right: 10,
        bottom: 20,
        left: 20
      };
      color = globalColoring;
      svg = d3.select("#taxonomy_container").append("svg").attr("width", width).attr("height", height).append("g").attr("transform", "translate(" + margin.left + "," + margin.top + ")");
      infoPanel = d3.select("#taxonomy_container").append("div").attr("id", "sankeyInfo").style({
        "opacity": 0,
        "z-index": -1
      });
      sankey = d3.sankey().size([width - 200, height - 100]).nodeWidth(15).nodePadding(10).nodes(taxonomySankey.nodes).links(taxonomySankey.links).layout(32, width - 200);
      path = sankey.link();
      link = svg.append("g").selectAll(".link").data(taxonomySankey.links).enter().append("path").attr("class", "link").attr("d", path).style('fill', function(d, i) {
        return color(d.target.name);
      }).sort(function(a, b) {
        return b.dy - a.dy;
      });
      node = svg.append("g").selectAll(".node").data(taxonomySankey.nodes).enter().append("g").attr("class", function(d) {
        if (isNaN(d.y)) {
          return 'nullnode';
        } else {
          return 'node';
        }
      }).attr("transform", function(d) {
        if (!isNaN(d.y)) {
          return "translate(" + d.x + "," + d.y + ")";
        }
      });
      node.append("rect").attr("height", function(d) {
        if (d.dy < 2) {
          return 2;
        } else {
          return d.dy;
        }
      }).attr("width", sankey.nodeWidth()).style("fill", function(d, i) {
        return color(d.name);
      }).on("click", function(d, i) {
        return _this.clickLargeSnakeyNode(d, i, taxonomySankey, svg);
      });
      node.append("text").attr("x", -6).attr("y", function(d) {
        return d.dy / 2;
      }).attr("dy", ".35em").attr("text-anchor", "end").attr("transform", null).text(function(d) {
        return d.name;
      }).filter(function(d) {
        return d.x < width / 2;
      }).attr("x", 6 + sankey.nodeWidth()).attr("text-anchor", "start");
      return this.sankeyFilterControl(nodesArr, taxonomySankey, svg);
    };

    taxonomyViz.prototype.clickLargeSnakeyNode = function(d, i, taxonomySankey, svg) {
      var content, infoPanel, k, sourceTotal, _i, _ref;
      infoPanel = d3.select("#taxonomy_container #sankeyInfo");
      content = "<div class='sankeyInfobox'><div id='sankeyRemover'><i class='icon-remove icon-large'></i></div>";
      if (d.targetLinks.length === 0) {
        content += "<p>This is a source node. It has " + d.sourceLinks.length + " branches.</p><p>Their distribution are: </p>";
      } else if (d.sourceLinks.length === 0) {
        content += "<p>This is an end node.</p><p>Its absolute reads is " + d.targetLinks[0].absValue + ".</p></div>";
      } else {
        sourceTotal = 0;
        for (k = _i = 0, _ref = d.sourceLinks.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; k = 0 <= _ref ? ++_i : --_i) {
          sourceTotal += d.sourceLinks[k].absValue;
        }
        content += "<p>It has " + d.sourceLinks.length + " branches. The total reads is " + sourceTotal + "</p><p>Their distribution are: </p>";
      }
      content += "</div>";
      infoPanel.html(content);
      this.drawSmallSankey(infoPanel, d, taxonomySankey, svg);
      svg.transition().duration(750).ease("quad-in-out").style({
        "opacity": 0,
        "z-index": -1
      });
      infoPanel.style('z-index', 3).transition().duration(750).ease("quad-in-out").style({
        "opacity": 1
      });
      return $('#sankeyRemover').click(function() {
        infoPanel.transition().duration(750).ease("quad-in-out").style({
          "opacity": 0,
          "z-index": -1
        });
        return svg.transition().duration(750).ease("quad-in-out").style({
          "opacity": 1,
          "z-index": 1
        });
      });
    };

    taxonomyViz.prototype.drawSmallSankey = function(div, targetNode, originalSankey, originalSVG) {
      var acceptableHeight, color, divHeight, divLarge, link, maxDivHeight, maxNodesOnSide, minHeight, node, nodeHeight, path, smallSankey, smallSankeyDimensions, smallSankeySVG, smlTaxonomySankey, targetHeight, _i, _j, _len, _len1, _ref, _ref1,
        _this = this;
      smlTaxonomySankey = new Object();
      smlTaxonomySankey.nodes = [];
      smlTaxonomySankey.links = [];
      smlTaxonomySankey.nodes.push(_.clone(targetNode));
      minHeight = 600;
      targetHeight = 600;
      maxNodesOnSide = 1;
      if (targetNode.targetLinks.length > maxNodesOnSide) {
        maxNodesOnSide = targetNode.targetLinks.length;
      }
      if (targetNode.sourceLinks.length > maxNodesOnSide) {
        maxNodesOnSide = targetNode.sourceLinks.length;
      }
      _ref = targetNode.targetLinks;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        node = _ref[_i];
        smlTaxonomySankey.nodes.push(_.clone(node.source));
        link = {
          source: smlTaxonomySankey.nodes.length - 1,
          target: 0,
          value: node.absValue
        };
        smlTaxonomySankey.links.push(link);
      }
      _ref1 = targetNode.sourceLinks;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        node = _ref1[_j];
        smlTaxonomySankey.nodes.push(_.clone(node.target));
        link = {
          source: 0,
          target: smlTaxonomySankey.nodes.length - 1,
          value: node.absValue
        };
        smlTaxonomySankey.links.push(link);
      }
      nodeHeight = 12;
      acceptableHeight = maxNodesOnSide * nodeHeight;
      if (acceptableHeight > targetHeight) {
        targetHeight = acceptableHeight;
      }
      divHeight = targetHeight + 80;
      maxDivHeight = 800;
      divLarge = false;
      if (divHeight > maxDivHeight) {
        divHeight = maxDivHeight;
        divLarge = true;
      }
      d3.select('.sankeyInfobox').style('height', divHeight + 'px').style('overflow-y', function() {
        if (divLarge) {
          return 'scroll';
        } else {
          return 'visible';
        }
      });
      smallSankeyDimensions = {
        w: 600,
        h: targetHeight
      };
      smallSankeySVG = div.select('.sankeyInfobox').append('svg').attr('width', smallSankeyDimensions.w).attr('height', smallSankeyDimensions.h);
      color = globalColoring;
      smallSankey = d3.sankey().size([smallSankeyDimensions.w, smallSankeyDimensions.h - 10]).nodeWidth(15).nodePadding(10).nodes(smlTaxonomySankey.nodes).links(smlTaxonomySankey.links).layout(128, smallSankeyDimensions.w);
      path = smallSankey.link();
      link = smallSankeySVG.append('g').selectAll('.link').data(smlTaxonomySankey.links);
      link.enter().append('path').attr('class', 'link');
      link.attr('d', path).style('fill', function(d) {
        return color(d.target.name);
      }).sort(function(a, b) {
        return b.dy - a.dy;
      });
      node = smallSankeySVG.append('g').selectAll('.node').data(smlTaxonomySankey.nodes).enter().append("g").attr("class", function(d) {
        if (isNaN(d.y)) {
          return 'nullnode';
        } else {
          return 'node';
        }
      }).attr("transform", function(d) {
        if (!isNaN(d.y)) {
          return "translate(" + d.x + "," + d.y + ")";
        }
      });
      node.append("rect").attr("height", function(d) {
        if (d.dy < 2) {
          return 2;
        } else {
          return d.dy;
        }
      }).attr("width", smallSankey.nodeWidth()).style("fill", function(d, i) {
        return color(d.name);
      }).on('click', function(d, i) {
        return _this.clickSmallSankeyNode(d, i, originalSankey, originalSVG);
      });
      node.append('rect').attr('height', function(d) {
        var originalNode, ratio;
        originalNode = _.filter(originalSankey.nodes, function(dd) {
          return dd.name === d.name;
        });
        if (originalNode.length > 1) {
          console.error('more than one matching node');
          console.error(originalNode);
        }
        originalNode = originalNode[0];
        ratio = 1 - d.value / originalNode.value;
        if (d.dy < 2) {
          d.fillHeight = 2;
        } else {
          d.fillHeight = d.dy * ratio;
        }
        return d.fillHeight;
      }).attr('width', smallSankey.nodeWidth()).style('fill', 'rgba(255,255,255,0.8)').attr('y', function(d) {
        return d.dy - d.fillHeight;
      }).style('pointer-events', 'none');
      return node.append('text').attr("x", -6).attr("y", function(d) {
        return d.dy / 2;
      }).attr("dy", ".35em").attr("text-anchor", "end").attr("transform", null).text(function(d) {
        return d.name;
      }).filter(function(d) {
        return d.x < width / 2;
      }).attr("x", 6 + smallSankey.nodeWidth()).attr("text-anchor", "start");
    };

    taxonomyViz.prototype.clickSmallSankeyNode = function(d, i, originalSankey, originalSVG) {
      var originalData;
      originalData = _.filter(originalSankey.nodes, function(dd) {
        return dd.name === d.name;
      });
      if (originalData.length > 1) {
        console.error('more than one matching node found');
        console.error(originalData);
      } else {
        originalData = originalData[0];
      }
      return this.clickLargeSnakeyNode(originalData, i, originalSankey, originalSVG);
    };

    taxonomyViz.prototype.sankeyFilterControl = function(_nodesArr, taxonomySankey, svg) {
      var availableTags, color, i, nodesArr, searchList, that, _i, _ref;
      that = this;
      color = globalColoring;
      nodesArr = _nodesArr;
      availableTags = new Array(nodesArr.length);
      for (i = _i = 0, _ref = nodesArr.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        availableTags[i] = nodesArr[i];
      }
      $('#tags').keydown(function() {
        if ($('#tags').val().length < 4) {
          return $('#autoCompleteList').fadeOut(200);
        }
      });
      searchList = [];
      $('#autoCompleteList').fadeOut(800);
      return $("#tags").autocomplete({
        source: availableTags,
        minLength: 2,
        response: function(evt, ui) {
          var content, _j, _k, _ref1, _ref2;
          $('#autoCompleteList').html("");
          searchList.length = 0;
          if (ui.content.length > 0) {
            for (i = _j = 0, _ref1 = ui.content.length - 1; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; i = 0 <= _ref1 ? ++_j : --_j) {
              searchList.push(ui.content[i].value);
            }
            content = '<i class="icon-remove icon-large" style="float:right; margin-right: 5px;" id = "iconRemover"></i><ul>';
            for (i = _k = 0, _ref2 = searchList.length - 1; 0 <= _ref2 ? _k <= _ref2 : _k >= _ref2; i = 0 <= _ref2 ? ++_k : --_k) {
              content += '<li><span style = "display:block; background-color:' + color(searchList[i]) + '; height: 12px; width: 12px; float: left; margin: 2px 0px;" ></span>&nbsp;&nbsp;';
              content += searchList[i] + '</li>';
            }
            content += '</ul>';
            $('#autoCompleteList').append(content);
            $('#autoCompleteList ul li').each(function(index) {
              return $(this).click(function() {
                var m, _l, _ref3, _results;
                _results = [];
                for (m = _l = 0, _ref3 = taxonomySankey.nodes.length - 1; 0 <= _ref3 ? _l <= _ref3 : _l >= _ref3; m = 0 <= _ref3 ? ++_l : --_l) {
                  if (taxonomySankey.nodes[m].name === $(this)[0].textContent.substr(2)) {
                    _results.push(that.clickLargeSnakeyNode(taxonomySankey.nodes[m], m, taxonomySankey, svg));
                  } else {
                    _results.push(void 0);
                  }
                }
                return _results;
              });
            });
            $('#iconRemover').click(function() {
              return $('#autoCompleteList').fadeOut(200);
            });
            return $('#autoCompleteList').show();
          } else {
            $('#autoCompleteList').html("");
            return $('#autoCompleteList').hide();
          }
        }
      });
    };

    taxonomyViz.prototype.drawTaxonomyDonuts = function(cur_attribute) {
      var alphagroupble_array, arr_id, count, donutArr, groupable_array, i, j, selected_new_data_matrix_onLayer, _i, _j, _k, _l, _m, _n, _o, _p, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _results;
      this.fadeInOutCtrl();
      groupable_array = [];
      for (i = _i = 0, _ref = selected_samples.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        if (groupable_array.indexOf(biom.columns[selected_samples[i]].metadata[cur_attribute]) === -1) {
          groupable_array.push(biom.columns[selected_samples[i]].metadata[cur_attribute]);
        }
      }
      count = new Array(groupable_array.length);
      for (i = _j = 0, _ref1 = groupable_array.length - 1; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; i = 0 <= _ref1 ? ++_j : --_j) {
        count[i] = [];
      }
      selected_new_data_matrix_onLayer = new Array(new_data_matrix_onLayer.length);
      for (i = _k = 0, _ref2 = new_data_matrix_onLayer.length - 1; 0 <= _ref2 ? _k <= _ref2 : _k >= _ref2; i = 0 <= _ref2 ? ++_k : --_k) {
        selected_new_data_matrix_onLayer[i] = new Array(groupable_array.length);
        for (j = _l = 0, _ref3 = groupable_array.length - 1; 0 <= _ref3 ? _l <= _ref3 : _l >= _ref3; j = 0 <= _ref3 ? ++_l : --_l) {
          selected_new_data_matrix_onLayer[i][j] = 0;
        }
        for (j = _m = 0, _ref4 = selected_samples.length - 1; 0 <= _ref4 ? _m <= _ref4 : _m >= _ref4; j = 0 <= _ref4 ? ++_m : --_m) {
          arr_id = groupable_array.indexOf(biom.columns[selected_samples[j]].metadata[cur_attribute]);
          selected_new_data_matrix_onLayer[i][arr_id] += new_data_matrix_onLayer[i][selected_samples[j]];
        }
      }
      for (i = _n = 0, _ref5 = selected_samples.length - 1; 0 <= _ref5 ? _n <= _ref5 : _n >= _ref5; i = 0 <= _ref5 ? ++_n : --_n) {
        count[groupable_array.indexOf(biom.columns[selected_samples[i]].metadata[cur_attribute])].push(selected_samples[i]);
      }
      d3.select('#taxonomy_container').attr("width", 1200).attr("height", 250 * groupable_array.length + 200);
      alphagroupble_array = _.clone(groupable_array).sort();
      console.log(groupable_array);
      console.log(alphagroupble_array);
      _results = [];
      for (i = _o = 0, _ref6 = groupable_array.length - 1; 0 <= _ref6 ? _o <= _ref6 : _o >= _ref6; i = 0 <= _ref6 ? ++_o : --_o) {
        donutArr = [];
        for (j = _p = 0, _ref7 = selected_new_data_matrix_onLayer.length - 1; 0 <= _ref7 ? _p <= _ref7 : _p >= _ref7; j = 0 <= _ref7 ? ++_p : --_p) {
          donutArr.push(selected_new_data_matrix_onLayer[j][i]);
        }
        _results.push(this.drawBasicDonut(i, groupable_array[i], donutArr, count[i], alphagroupble_array.indexOf(groupable_array[i])));
      }
      return _results;
    };

    taxonomyViz.prototype.drawBasicDonut = function(donutID, donutName, donutData, donutContainedSamp, posID) {
      var arc, g, infoPanel, pie, radius, svg, that, yScale,
        _this = this;
      radius = 100;
      yScale = d3.scale.pow().exponent(.4).domain([0, d3.max(donutData)]).range([0, 100]);
      arc = d3.svg.arc().outerRadius(radius).innerRadius(50);
      pie = d3.layout.pie().sort(null).value(function(d) {
        return yScale(d);
      });
      d3.select('#taxonomy_container').append('div').attr("id", "donut_" + donutID).attr("class", "donutDiv").style('top', (250 + posID * 290) + 'px');
      svg = d3.select('#donut_' + donutID).append('svg').attr("width", 300).attr("height", 255).style("float", "left").append("g").attr("transform", "translate(" + 125 + "," + 125 + ")");
      svg.append('text').attr('dy', '.35em').attr('y', '-7').style('text-anchor', 'middle').attr("font-size", "12px").text(donutName);
      svg.append('text').attr('dy', '.35em').style('text-anchor', 'middle').attr("font-size", "14px").attr("font-weight", "bold").attr('y', '7').text(d3.sum(donutData));
      that = this;
      g = svg.selectAll(".arc").data(pie(donutData)).enter().append("g").attr('class', 'arc_' + donutID);
      g.append("path").attr('d', arc).style('fill', function(d, i) {
        return fillCol[i % 20];
      }).on('mouseover', function(d, i) {
        var index;
        index = i;
        return d3.selectAll('g.arc_' + donutID).style('opacity', function(d, i) {
          if (i !== index) {
            return 0.5;
          }
        });
      }).on('mouseout', function(d, i) {
        return d3.selectAll('g.arc_' + donutID).style('opacity', 1);
      }).on('click', function(d, i) {
        return that.drawBasicRect(false, donutContainedSamp, donutID, i, $('#toggle_' + donutID).html());
      });
      infoPanel = d3.select('#donut_' + donutID).append("div").attr("class", "panelCombSample").html('<a class="toggleStandard" id="toggle_' + donutID + '">dynamic</a><span class="containedTaxonomy" id="containedTaxonomy_' + donutID + '"></span><div id="selectedColumn_' + donutID + '"></div>');
      $('#toggle_' + donutID).click(function() {
        if ($('#toggle_' + donutID).html() === 'standardized') {
          $('#toggle_' + donutID).html('dynamic');
        } else {
          $('#toggle_' + donutID).html('standardized');
        }
        return _this.drawBasicRect(true, donutContainedSamp, donutID, null, $('#toggle_' + donutID).html());
      });
      return this.drawBasicRect(true, donutContainedSamp, donutID, null, 'dynamic');
    };

    taxonomyViz.prototype.drawBasicRect = function(totalFlag, containedSamp, donutID, selectedTaxnomy, toggleStandard) {
      var eachBarWidth, i, j, rectArr, rectContainedSamp, rule, thisTaxonomyName, yScale, _i, _j, _ref, _ref1;
      rectArr = new Array(containedSamp.length);
      for (i = _i = 0, _ref = containedSamp.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        rectArr[i] = 0;
        if (totalFlag) {
          for (j = _j = 0, _ref1 = new_data_matrix_onLayer.length - 1; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; j = 0 <= _ref1 ? ++_j : --_j) {
            rectArr[i] += new_data_matrix_onLayer[j][containedSamp[i]];
          }
        } else {
          rectArr[i] += new_data_matrix_onLayer[selectedTaxnomy][containedSamp[i]];
        }
      }
      d3.select('#containedTaxonomy_' + donutID).html("");
      if (totalFlag) {
        d3.select('#containedTaxonomy_' + donutID).html(unique_taxonomy_comb_onLayer.length + ' Taxonomy in Total');
      } else {
        thisTaxonomyName = unique_taxonomy_comb_onLayer[selectedTaxnomy][0] + ',' + unique_taxonomy_comb_onLayer[selectedTaxnomy][1] + ',' + unique_taxonomy_comb_onLayer[selectedTaxnomy][2] + ',' + unique_taxonomy_comb_onLayer[selectedTaxnomy][3] + ',' + unique_taxonomy_comb_onLayer[selectedTaxnomy][4] + ',' + unique_taxonomy_comb_onLayer[selectedTaxnomy][5] + ',' + unique_taxonomy_comb_onLayer[selectedTaxnomy][6];
        d3.select('#containedTaxonomy_' + donutID).html('Taxonomy:  ' + thisTaxonomyName);
      }
      if (d3.max(rectArr) > standardizedValue) {
        standardizedValue = d3.max(rectArr);
      }
      if (toggleStandard === 'dynamic') {
        yScale = d3.scale.pow().exponent(.5).domain([0, d3.max(rectArr)]).range([2, 160]);
      } else {
        yScale = d3.scale.pow().exponent(.5).domain([0, standardizedValue]).range([2, 160]);
      }
      eachBarWidth = 800 / containedSamp.length;
      if (eachBarWidth < 10) {
        return d3.select('#selectedColumn_' + donutID).html("Too many samples!" + containedSamp);
      } else {
        d3.select('#selectedColumn_' + donutID).select('svg').remove();
        rectContainedSamp = d3.select('#selectedColumn_' + donutID).append('svg');
        rectContainedSamp.selectAll('rect').data(rectArr).enter().append('rect').attr('height', function(d) {
          return yScale(d);
        }).attr('width', eachBarWidth - 3).attr("x", function(d, i) {
          return eachBarWidth * i + 50;
        }).attr("y", function(d, i) {
          return 170 - yScale(d);
        }).style("fill", function(d, i) {
          if (totalFlag) {
            return '#ff8900';
          } else {
            return fillCol[selectedTaxnomy % 20];
          }
        });
        rectContainedSamp.selectAll('text').data(containedSamp).enter().append('text').text(function(d, i) {
          return String(selected_phinchID_array[i]);
        }).attr('x', function(d, i) {
          return eachBarWidth * (i + 0.5) + 50;
        }).attr('y', 200).attr('width', eachBarWidth).attr('text-anchor', 'end').attr("font-size", "9px").attr('fill', '#444').attr("transform", function(d, i) {
          return "translate( " + (eachBarWidth / 3.3 * i - 120) + "," + (80 + i * 0.71 * eachBarWidth + eachBarWidth / 3) + ")rotate(-45)";
        });
        rule = rectContainedSamp.selectAll('g.rule').data(yScale.ticks(10)).enter().append('g').attr('class', 'rule').attr('transform', function(d) {
          return "translate(0," + (172 - yScale(d)) + ")";
        });
        rule.append('line').attr('x1', 45).attr('x2', 870).style("stroke", function(d) {
          if (d) {
            return "#eee";
          } else {
            return "#444";
          }
        }).style("stroke-opacity", function(d) {
          if (d) {
            return 0.7;
          } else {
            return null;
          }
        });
        return rule.append('text').attr('x', 40).attr("font-size", "9px").attr('text-anchor', 'end').attr('fill', '#444').text(function(d, i) {
          return format(d);
        });
      }
    };

    taxonomyViz.prototype.drawTaxonomyByAttributes = function(cur_attribute) {
      var arr_id, attributes_array, content, count, countEmpty, i, j, legendArr, selected_new_data_matrix_onLayer, temp, _i, _j, _k, _l, _m, _n, _o, _p, _q, _r, _ref, _ref1, _ref10, _ref11, _ref12, _ref13, _ref14, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8, _ref9, _s, _t, _u, _v, _w;
      $('#attributes_dropdown').fadeIn(800);
      selected_new_data_matrix_onLayer = new Array(new_data_matrix_onLayer.length);
      attributes_array = [];
      countEmpty = [];
      for (i = _i = 0, _ref = selected_samples.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        if (attributes_array.indexOf(parseFloat(biom.columns[selected_samples[i]].metadata[cur_attribute].split(" ")[0])) === -1 && biom.columns[selected_samples[i]].metadata[cur_attribute] !== 'no_data') {
          attributes_array.push(parseFloat(biom.columns[selected_samples[i]].metadata[cur_attribute].split(" ")[0]));
        }
      }
      attributes_array.sort(function(a, b) {
        return a - b;
      });
      count = new Array(attributes_array.length);
      for (i = _j = 0, _ref1 = attributes_array.length - 1; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; i = 0 <= _ref1 ? ++_j : --_j) {
        count[i] = [];
      }
      for (i = _k = 0, _ref2 = new_data_matrix_onLayer.length - 1; 0 <= _ref2 ? _k <= _ref2 : _k >= _ref2; i = 0 <= _ref2 ? ++_k : --_k) {
        selected_new_data_matrix_onLayer[i] = new Array(attributes_array.length);
        for (j = _l = 0, _ref3 = attributes_array.length - 1; 0 <= _ref3 ? _l <= _ref3 : _l >= _ref3; j = 0 <= _ref3 ? ++_l : --_l) {
          selected_new_data_matrix_onLayer[i][j] = 0.0;
        }
        for (j = _m = 0, _ref4 = selected_samples.length - 1; 0 <= _ref4 ? _m <= _ref4 : _m >= _ref4; j = 0 <= _ref4 ? ++_m : --_m) {
          arr_id = attributes_array.indexOf(parseFloat(biom.columns[selected_samples[j]].metadata[cur_attribute].split(" ")[0]));
          selected_new_data_matrix_onLayer[i][arr_id] += new_data_matrix_onLayer[i][selected_samples[j]];
        }
      }
      for (i = _n = 0, _ref5 = selected_samples.length - 1; 0 <= _ref5 ? _n <= _ref5 : _n >= _ref5; i = 0 <= _ref5 ? ++_n : --_n) {
        if (!isNaN(parseFloat(biom.columns[selected_samples[i]].metadata[cur_attribute].split(" ")[0]))) {
          count[attributes_array.indexOf(parseFloat(biom.columns[selected_samples[i]].metadata[cur_attribute].split(" ")[0]))].push(selected_samples[i]);
        } else {
          countEmpty.push(selected_samples[i]);
        }
      }
      vizdata = new Array(selected_new_data_matrix_onLayer.length);
      sumEachCol = new Array(attributes_array.length);
      for (i = _o = 0, _ref6 = selected_new_data_matrix_onLayer.length - 1; 0 <= _ref6 ? _o <= _ref6 : _o >= _ref6; i = 0 <= _ref6 ? ++_o : --_o) {
        vizdata[i] = new Array(attributes_array.length);
        for (j = _p = 0, _ref7 = attributes_array.length - 1; 0 <= _ref7 ? _p <= _ref7 : _p >= _ref7; j = 0 <= _ref7 ? ++_p : --_p) {
          vizdata[i][j] = new Object();
          vizdata[i][j].x = j;
          vizdata[i][j].y = selected_new_data_matrix_onLayer[i][j];
          vizdata[i][j].name = unique_taxonomy_comb_onLayer[i][0] + ',' + unique_taxonomy_comb_onLayer[i][1] + ',' + unique_taxonomy_comb_onLayer[i][2] + ',' + unique_taxonomy_comb_onLayer[i][3] + ',' + unique_taxonomy_comb_onLayer[i][4] + ',' + unique_taxonomy_comb_onLayer[i][5] + ',' + unique_taxonomy_comb_onLayer[i][6];
        }
      }
      for (i = _q = 0, _ref8 = attributes_array.length - 1; 0 <= _ref8 ? _q <= _ref8 : _q >= _ref8; i = 0 <= _ref8 ? ++_q : --_q) {
        sumEachCol[i] = 0;
        for (j = _r = 0, _ref9 = selected_new_data_matrix_onLayer.length - 1; 0 <= _ref9 ? _r <= _ref9 : _r >= _ref9; j = 0 <= _ref9 ? ++_r : --_r) {
          vizdata[j][i].y0 = sumEachCol[i];
          sumEachCol[i] += selected_new_data_matrix_onLayer[j][i];
        }
      }
      this.drawBasicColumns(attributes_array);
      $('#count_container').html("");
      content = '';
      content += '<span>' + cur_attribute + ', ' + selected_attributes_units_array[selected_attributes_array.indexOf(cur_attribute)] + '</span>';
      if (attributes_array.length > 0) {
        for (i = _s = 0, _ref10 = attributes_array.length - 1; 0 <= _ref10 ? _s <= _ref10 : _s >= _ref10; i = 0 <= _ref10 ? ++_s : --_s) {
          content += '<p><b>' + attributes_array[i] + '</b>:&nbsp;&nbsp;';
          if (count[i].length > 0) {
            for (j = _t = 0, _ref11 = count[i].length - 1; 0 <= _ref11 ? _t <= _ref11 : _t >= _ref11; j = 0 <= _ref11 ? ++_t : --_t) {
              content += count[i][j] + ', ';
            }
          } else {
            content += 'no samples';
          }
          content += '</p>';
        }
      }
      if (countEmpty.length > 0) {
        content += '<p><i><b>* NaN value samples</b>:&nbsp;&nbsp;';
        for (i = _u = 0, _ref12 = countEmpty.length - 1; 0 <= _ref12 ? _u <= _ref12 : _u >= _ref12; i = 0 <= _ref12 ? ++_u : --_u) {
          content += countEmpty[i] + ', ';
        }
        content += '</i></p>';
      }
      $('#count_container').html(content);
      legendArr = [];
      for (i = _v = 0, _ref13 = selected_new_data_matrix_onLayer.length - 1; 0 <= _ref13 ? _v <= _ref13 : _v >= _ref13; i = 0 <= _ref13 ? ++_v : --_v) {
        temp = new Object();
        temp.originalID = i;
        temp.value = 0;
        temp.name = unique_taxonomy_comb_onLayer[i][0] + ',' + unique_taxonomy_comb_onLayer[i][1] + ',' + unique_taxonomy_comb_onLayer[i][2] + ',' + unique_taxonomy_comb_onLayer[i][3] + ',' + unique_taxonomy_comb_onLayer[i][4] + ',' + unique_taxonomy_comb_onLayer[i][5] + ',' + unique_taxonomy_comb_onLayer[i][6];
        for (j = _w = 0, _ref14 = selected_new_data_matrix_onLayer[0].length - 1; 0 <= _ref14 ? _w <= _ref14 : _w >= _ref14; j = 0 <= _ref14 ? ++_w : --_w) {
          temp.value += selected_new_data_matrix_onLayer[i][j];
        }
        legendArr.push(temp);
      }
      return this.createLegend(legendArr);
    };

    taxonomyViz.prototype.drawBasicColumns = function(attributes_array) {
      var h, label, margin, max_single, rect, rule, svg, taxonomy, tooltip, w, x, y;
      this.fadeInOutCtrl();
      w = sumEachCol.length < 80 ? 600 : sumEachCol.length * 18;
      h = 800;
      max_single = d3.max(sumEachCol);
      margin = {
        top: 20,
        right: 20,
        bottom: 20,
        left: 100
      };
      x = d3.scale.ordinal().domain(vizdata[0].map(function(d) {
        return d.x;
      })).rangeRoundBands([0, w - margin.right - margin.left]);
      y = d3.scale.linear().domain([0, max_single]).range([0, h - margin.top - margin.bottom]);
      svg = d3.select("#taxonomy_container").append("svg").attr("width", w).attr("height", h + 100).append("g").attr("transform", "translate(" + margin.left + "," + margin.top + ")");
      tooltip = d3.select("#taxonomy_container").append("div").attr("class", "tooltipOverSmallThumb").style("visibility", "hidden");
      taxonomy = svg.selectAll('g.taxonomy').data(vizdata).enter().append('g').attr('class', 'taxonomy').style('fill', function(d, i) {
        return fillCol[i % 20];
      }).on('mouseover', function(d, i) {
        return d3.select(this).style({
          'fill': d3.rgb(fillCol[i % 20]).darker()
        });
      }).on('mouseout', function(d, i) {
        return d3.select(this).style({
          'fill': fillCol[i % 20]
        });
      });
      rect = taxonomy.selectAll('rect').data(Object).enter().append('rect').attr('class', 'pane').attr('x', function(d, i) {
        if (sumEachCol.length < 80) {
          return x(d.x) + i * 3;
        } else {
          return 15 * i + i * 3;
        }
      }).attr('y', function(d, i) {
        if (!percentage) {
          return h - y(d.y) - y(d.y0);
        } else {
          return h - (y(d.y) + y(d.y0)) / sumEachCol[i] * max_single;
        }
      }).attr('height', function(d, i) {
        if (!percentage) {
          return y(d.y);
        } else {
          return y(d.y) / sumEachCol[i] * max_single;
        }
      }).attr('width', function(d, i) {
        if (sumEachCol.length < 80) {
          return x.rangeBand();
        } else {
          return 15;
        }
      }).on('mouseover', function(d, i) {
        tooltip.html("Taxonomy: " + d.name + "<br/> Total: " + d.y);
        return tooltip.style({
          "visibility": "visible",
          top: (d3.event.pageY - 10) + "px",
          left: (d3.event.pageX + 10) + "px"
        });
      }).on('mouseout', function(d, i) {
        return tooltip.style("visibility", "hidden");
      });
      label = svg.selectAll('text').data(attributes_array).enter().append('text').text(function(d, i) {
        return d;
      }).attr('x', function(d, i) {
        if (sumEachCol.length < 80) {
          return x.rangeBand() * i + x.rangeBand() / 2 + i * 3;
        } else {
          return 15 * i + 7.5 + i * 3;
        }
      }).attr('y', h + 15).attr('text-anchor', 'middle').attr("font-size", "10px").attr('fill', '#444');
      rule = svg.selectAll('g.rule').data(y.ticks(10)).enter().append('g').attr('class', 'rule').attr('transform', function(d) {
        return "translate(0," + (h - y(d)) + ")";
      });
      rule.append('line').attr('x2', function(d, i) {
        if (sumEachCol.length < 80) {
          return w - margin.left - margin.right + 30;
        } else {
          return w + 30;
        }
      }).style("stroke", function(d) {
        if (d) {
          return "#eee";
        } else {
          return "#444";
        }
      }).style("stroke-opacity", function(d) {
        if (d) {
          return 0.7;
        } else {
          return null;
        }
      });
      return rule.append('text').attr('x', -25).attr("font-size", "9px").attr('text-anchor', 'end').attr('fill', '#444').text(function(d, i) {
        if (!percentage) {
          return format(d);
        } else {
          return Math.round(i / (y.ticks(10).length) * 100) + '%';
        }
      });
    };

    taxonomyViz.prototype.drawOTUBubble = function() {
      var data, filteredData, flag, fontScale, h, i, j, node, nodes, pack, r, root, rowID, that, threshold, vis, w, x, y, _i, _j, _k, _l, _m, _ref, _ref1, _ref2, _ref3, _ref4;
      this.fadeInOutCtrl();
      data = {};
      data.name = 'BIOM';
      data.children = new Array(unique_taxonomy_comb_onLayer.length);
      for (i = _i = 0, _ref = unique_taxonomy_comb_onLayer.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        data.children[i] = new Object();
        data.children[i].name = unique_taxonomy_comb_onLayer[i][0] + ',' + unique_taxonomy_comb_onLayer[i][1] + ',' + unique_taxonomy_comb_onLayer[i][2] + ',' + unique_taxonomy_comb_onLayer[i][3] + ',' + unique_taxonomy_comb_onLayer[i][4] + ',' + unique_taxonomy_comb_onLayer[i][5] + ',' + unique_taxonomy_comb_onLayer[i][6];
        data.children[i].children = new Array(unique_taxonomy_comb_count[i]);
        data.children[i].counter = 0;
        for (j = _j = 0, _ref1 = unique_taxonomy_comb_count[i] - 1; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; j = 0 <= _ref1 ? ++_j : --_j) {
          data.children[i].children[j] = new Object();
          data.children[i].children[j].id = void 0;
          data.children[i].children[j].size = 0;
        }
      }
      for (i = _k = 0, _ref2 = biom.data.length - 1; 0 <= _ref2 ? _k <= _ref2 : _k >= _ref2; i = 0 <= _ref2 ? ++_k : --_k) {
        flag = true;
        rowID = map_array[biom.data[i][0]];
        for (j = _l = 0, _ref3 = unique_taxonomy_comb_count[rowID] - 1; 0 <= _ref3 ? _l <= _ref3 : _l >= _ref3; j = 0 <= _ref3 ? ++_l : --_l) {
          if (data.children[rowID].children[j].id === biom.data[i][0]) {
            flag = false;
            data.children[rowID].children[j].size += biom.data[i][2];
          }
        }
        if (flag) {
          data.children[rowID].children[data.children[rowID].counter].id = biom.data[i][0];
          data.children[rowID].children[data.children[rowID].counter].size += biom.data[i][2];
          data.children[rowID].counter += 1;
        }
      }
      w = 1200;
      h = 1100;
      r = 1000;
      x = d3.scale.linear().range([5, r]);
      y = d3.scale.linear().range([5, r]);
      fontScale = d3.scale.linear().domain([0, 0.5]).range([10, 20]);
      node = null;
      root = null;
      pack = d3.layout.pack().size([r, r]).value(function(d) {
        return Math.sqrt(d.size);
      });
      vis = d3.select("#taxonomy_container").append("svg:svg").attr("width", 1200).attr("height", 1100).append('svg:g').attr("transform", "translate(" + (w - r) / 2 + ", 10)");
      threshold = 1000;
      filteredData = {};
      filteredData.name = 'BIOM';
      filteredData.children = [];
      for (i = _m = 0, _ref4 = data.children.length - 1; 0 <= _ref4 ? _m <= _ref4 : _m >= _ref4; i = 0 <= _ref4 ? ++_m : --_m) {
        if (data.children[i].counter > threshold) {
          filteredData.children.push(data.children[i]);
        }
      }
      node = filteredData;
      root = filteredData;
      nodes = pack.nodes(root);
      that = this;
      vis.selectAll("circle").data(nodes).enter().append("svg:circle").attr("class", function(d) {
        if (d.children !== null) {
          return 'parent';
        } else {
          return 'child';
        }
      }).attr("cx", function(d) {
        return d.x;
      }).attr("cy", function(d) {
        return d.y;
      }).attr("r", function(d) {
        return d.r;
      }).style("fill", '#ff8900');
      return vis.selectAll("text").data(nodes).enter().append("svg:text").attr("class", function(d) {
        if (d.children !== null) {
          return 'parent';
        } else {
          return 'child';
        }
      }).attr("x", function(d) {
        return d.x;
      }).attr("y", function(d) {
        d.y += d.r * (Math.random() - 0.5);
        return d.y;
      }).attr("font-size", function(d) {
        return fontScale(d.r / r) + "px";
      }).attr("text-anchor", "middle").style("fill", '#ff8900').style("opacity", function(d) {
        if (d.r > 50) {
          return 0.8;
        } else {
          return 0;
        }
      }).text(function(d) {
        return d.name;
      });
    };

    taxonomyViz.prototype.zoomBubble = function(vis, d) {
      var k, node, r, t, x, y;
      r = 1000;
      k = r / d.r / 2;
      x = d3.scale.linear().range([5, r]);
      y = d3.scale.linear().range([5, r]);
      x.domain([d.x - d.r, d.x + d.r]);
      y.domain([d.y - d.r, d.y + d.r]);
      t = vis.transition().duration(function() {
        if (d3.event.altKey != null) {
          return 750;
        } else {
          return 500;
        }
      });
      t.selectAll("circle").attr("cx", function(d) {
        return x(d.x);
      }).attr("cy", function(d) {
        return y(d.y);
      }).attr("r", function(d) {
        return k * d.r;
      });
      t.selectAll("text").attr("x", function(d) {
        return x(d.x);
      }).attr("y", function(d) {
        return y(d.y);
      }).style("opacity", function(d) {
        var _ref;
        return (_ref = k * d.r > 20) != null ? _ref : {
          1: 0
        };
      });
      node = d;
      return d3.event.stopPropagation();
    };

    taxonomyViz.prototype.createLegend = function(legendArr) {
      var content, i, legendLen, _i;
      legendArr.sort(function(a, b) {
        return b.value - a.value;
      });
      $('#legend_container').html('');
      content = '<ul>';
      if (legendArr.length < 10) {
        legendLen = legendArr.length - 1;
      } else {
        legendLen = 9;
      }
      for (i = _i = 0; 0 <= legendLen ? _i <= legendLen : _i >= legendLen; i = 0 <= legendLen ? ++_i : --_i) {
        content += '<li><span style = "display:block; background-color:' + fillCol[legendArr[i].originalID % 20] + '; height: 12px; width: 12px; float: left; margin: 2px 0px;" ></span>&nbsp;&nbsp;&nbsp;' + legendArr[i].name + '&nbsp;&nbsp;<b>' + format(legendArr[i].value) + '</b></li>';
      }
      content += '</ul>';
      $('#legend_container').append(content);
      if ($('#legend_header').html() === 'TOP SEQUENCES') {
        return $('#legend_header').css('width', $('#legend_container').width() - 1);
      }
    };

    taxonomyViz.prototype.fadeInOutCtrl = function() {
      $('#taxonomy_container').html("");
      $('#loadingLarge').css('opacity', '1');
      return $('#loadingLarge').animate({
        opacity: 0
      }, {
        duration: 2000,
        specialEasing: {
          width: "easeInOutQuad"
        },
        complete: function() {
          $('#taxonomy_container').animate({
            opacity: 1
          }, {
            duration: 2000
          });
          $('#layerSwitch').fadeIn(500);
          if (VizID === 0) {
            $('#outline').fadeIn(500);
            $('#tags').fadeIn(500);
            $('#PercentValue').fadeIn(500);
            $('#legend_header').fadeIn(500);
          }
          if (VizID === 1) {
            $('#ListBubble').fadeIn(500);
          }
          if (VizID === 2) {
            $('#tags').fadeIn(500);
            $('#alertBox').fadeIn(500);
            $('#layer_1').off('click');
            $('#layer_6').off('click');
            $('#layer_7').off('click');
            $('#alertBox').html("* " + unique_taxonomy_comb_count.length + " unique paths, cannot go deeper to the 6th or 7th layer.");
          }
          if (VizID === 4) {
            $('#PercentValue').fadeIn(500);
            $('#legend_header').fadeIn(500);
            return $('#count_header').fadeIn(500);
          }
        }
      });
    };

    return taxonomyViz;

  })();

  window.taxonomyViz = taxonomyViz;

}).call(this);
